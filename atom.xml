<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kason的博客</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://1194570458.github.io/"/>
  <updated>2020-05-28T03:23:32.150Z</updated>
  <id>https://1194570458.github.io/</id>
  
  <author>
    <name>Kason Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什么是Synchronized进阶版</title>
    <link href="https://1194570458.github.io/2020/05/28/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized%E8%BF%9B%E9%98%B6%E7%89%88/"/>
    <id>https://1194570458.github.io/2020/05/28/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized%E8%BF%9B%E9%98%B6%E7%89%88/</id>
    <published>2020-05-28T03:00:02.000Z</published>
    <updated>2020-05-28T03:23:32.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h1><h2 id="1-常见面试题"><a href="#1-常见面试题" class="headerlink" title="1. 常见面试题"></a>1. 常见面试题</h2><p>请描述synchrnoized和reentrantlock的底层实现及重入的底层原理 - 百度 阿里</p><p>请描述锁的四种状态和升级过程 - 百度 阿里</p><p>CAS的ABA问题如何解决 - 百度</p><p>请谈一下AQS，为什么AQS的底层是CAS + volatile - 百度</p><p>请谈一下你对volatile的理解 - 美团 阿里</p><p>volatile的可见性和禁止指令重排序是如何实现的 - 美团</p><p>CAS是什么 - 美团</p><p>请描述一下对象的创建过程 - 美团 顺丰</p><p>对象在内存中的内存布局 - 美团顺丰</p><p>DCL单例为什么要加volatile - 美团</p><p>解释一下锁的四种状态 - 顺丰</p><p>Object 0 = new Object()在内存中占了多少字节? - 顺丰</p><p>请描述synchronized和ReentrantLock的异同 - 顺丰</p><p>聊聊你对as -if- serial和happens- before语义的理解 - 京东</p><p>你了解ThreadLocal吗?你知道ThreadL ocal中如何解决内存泄漏问题吗? -</p><p>请描述一下锁的分类以及JDK中的应用 - 阿里</p><p>问:自旋锁一-定比重量级锁效率高吗? - 阿里</p><p>打开偏向锁是否效率一定会提升? 为什么?</p><h2 id="2-什么是CAS"><a href="#2-什么是CAS" class="headerlink" title="2. 什么是CAS"></a>2. 什么是CAS</h2><p>compare and swap </p><p>compare and exchange </p><p>比较和交换，多线程中，不加锁就可以修改一个值。修改值之前先比较旧的值，如果旧的值没有改变，就可以修改新的值。</p><img src="/2020/05/28/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized%E8%BF%9B%E9%98%B6%E7%89%88/image-20200527231154476.png" class=""><h3 id="2-1-ABA问题"><a href="#2-1-ABA问题" class="headerlink" title="2.1. ABA问题"></a>2.1. ABA问题</h3><ul><li>有一个变量A的值为1</li><li>线程一读取变量A的值为1</li><li>线程二读取变量A的值为1，然后修改为2</li><li>线程三读取变量A的值为2，然后修改为1</li><li>这时候线程一想把变量A的值修改为2，比较变量A的值仍然为1，没问题，然后把变量A修改为2（你的女朋友经历了别的男人，但是你依然发现不了，觉得这还是原来的女朋友）</li></ul><h4 id="2-1-1-如何解决"><a href="#2-1-1-如何解决" class="headerlink" title="2.1.1. 如何解决"></a>2.1.1. 如何解决</h4><p>加一个版本号，每修改一次，版本号也跟着修改，而且不重复</p><h3 id="2-2-CAS最终的汇编代码"><a href="#2-2-CAS最终的汇编代码" class="headerlink" title="2.2. CAS最终的汇编代码"></a>2.2. CAS最终的汇编代码</h3><p>多个处理器下加 <code>lock</code> 指令</p><img src="/2020/05/28/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized%E8%BF%9B%E9%98%B6%E7%89%88/image-20200527232500723.png" class=""><img src="/2020/05/28/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized%E8%BF%9B%E9%98%B6%E7%89%88/image-20200527232607732.png" class=""><p>最终实现</p><p>cmpxchg = cas 修改变量值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock cmpxchg 指令</span><br></pre></td></tr></table></figure><h2 id="3-用户态与内核态"><a href="#3-用户态与内核态" class="headerlink" title="3. 用户态与内核态"></a>3. 用户态与内核态</h2><p>JDK早期，synchronized 叫做重量级锁，因为申请锁资源必须通过kernel, 系统调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">;he11o.asm </span><br><span class="line">;write(int fd, const void *buffer, size_t nbytes)</span><br><span class="line"></span><br><span class="line">section data</span><br><span class="line">    msg db &quot;He11o&quot;, 0xA</span><br><span class="line">    1en equ $ - msg</span><br><span class="line">    </span><br><span class="line">section .text</span><br><span class="line">globa1 _start</span><br><span class="line">_start:</span><br><span class="line">    mov edx, len</span><br><span class="line">    mov ecx, msg</span><br><span class="line">    mov ebx, 1 ;文件描述符1 std_out</span><br><span class="line">    mov eax, 4 ;write函数系统调用号 4</span><br><span class="line">    int 0x80</span><br><span class="line">    </span><br><span class="line">    mov ebx, 0</span><br><span class="line">    mov eax, 1 ;exit函 数系统调用号</span><br><span class="line">    int 0x80</span><br></pre></td></tr></table></figure><h2 id="4-对象内存布局-markword"><a href="#4-对象内存布局-markword" class="headerlink" title="4. 对象内存布局(markword)"></a>4. 对象内存布局(markword)</h2><p>针对Hotspot JVM虚拟机</p><p>new一个对象{m=8}</p><blockquote><p>8个字节    markword</p><p>4个字节    内存指针</p><p>4个字节    成员变量</p><p>字节对齐</p></blockquote><h2 id="5-工具：JOL-Java-Object-Layout"><a href="#5-工具：JOL-Java-Object-Layout" class="headerlink" title="5. 工具：JOL = Java Object Layout"></a>5. 工具：JOL = Java Object Layout</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-测试"><a href="#5-1-测试" class="headerlink" title="5.1. 测试"></a>5.1. 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJOL</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><img src="/2020/05/28/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized%E8%BF%9B%E9%98%B6%E7%89%88/image-20200527235134651.png" class=""><h3 id="5-2-加锁后测试"><a href="#5-2-加锁后测试" class="headerlink" title="5.2. 加锁后测试"></a>5.2. 加锁后测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJOL</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (o)&#123;</span><br><span class="line">            System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p>锁信息保存在markword</p><img src="/2020/05/28/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized%E8%BF%9B%E9%98%B6%E7%89%88/image-20200528001359381.png" class=""><h2 id="6-synchronized的横切面详解"><a href="#6-synchronized的横切面详解" class="headerlink" title="6. synchronized的横切面详解"></a>6. synchronized的横切面详解</h2><h3 id="6-1-java源码层级"><a href="#6-1-java源码层级" class="headerlink" title="6.1. java源码层级"></a>6.1. java源码层级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJOL</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (o)&#123;</span><br><span class="line">            System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-字节码层级"><a href="#6-2-字节码层级" class="headerlink" title="6.2. 字节码层级"></a>6.2. 字节码层级</h3><p>MONITORENTER：上锁</p><p>MONITOREXIT：释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// access flags 0x9</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">([Ljava/lang/String;)</span>V</span></span><br><span class="line"><span class="function">    TRYCATCHBLOCK L0 L1 L2 <span class="keyword">null</span></span></span><br><span class="line"><span class="function">    TRYCATCHBLOCK L2 L3 L2 <span class="keyword">null</span></span></span><br><span class="line"><span class="function">   L4</span></span><br><span class="line"><span class="function">    LINENUMBER 11 L4</span></span><br><span class="line"><span class="function">    NEW java/lang/Object</span></span><br><span class="line"><span class="function">    DUP</span></span><br><span class="line"><span class="function">    INVOKESPECIAL java/lang/Object.&lt;init&gt; <span class="params">()</span>V</span></span><br><span class="line"><span class="function">    ASTORE 1</span></span><br><span class="line"><span class="function">   L5</span></span><br><span class="line"><span class="function">    LINENUMBER 13 L5</span></span><br><span class="line"><span class="function">    ALOAD 1</span></span><br><span class="line"><span class="function">    DUP</span></span><br><span class="line"><span class="function">    ASTORE 2</span></span><br><span class="line"><span class="function">    MONITORENTER <span class="comment">//上锁</span></span></span><br><span class="line"><span class="function">   L0</span></span><br><span class="line"><span class="function">    LINENUMBER 15 L0</span></span><br><span class="line"><span class="function">    ALOAD 2</span></span><br><span class="line"><span class="function">    MONITOREXIT <span class="comment">// 释放锁</span></span></span><br><span class="line"><span class="function">   L1</span></span><br><span class="line"><span class="function">    GOTO L6</span></span><br><span class="line"><span class="function">   L2</span></span><br><span class="line"><span class="function">    ASTORE 3</span></span><br><span class="line"><span class="function">    ALOAD 2</span></span><br><span class="line"><span class="function">    MONITOREXIT <span class="comment">// 发生异常退出后释放锁</span></span></span><br><span class="line"><span class="function">   L3</span></span><br><span class="line"><span class="function">    ALOAD 3</span></span><br><span class="line"><span class="function">    ATHROW</span></span><br><span class="line"><span class="function">   L6</span></span><br><span class="line"><span class="function">    LINENUMBER 16 L6</span></span><br><span class="line"><span class="function">    RETURN</span></span><br><span class="line"><span class="function">   L7</span></span><br><span class="line"><span class="function">    LOCALVARIABLE args [Ljava/lang/String</span>; L4 L7 <span class="number">0</span></span><br><span class="line">    LOCALVARIABLE o Ljava/lang/Object; L5 L7 <span class="number">1</span></span><br><span class="line">    MAXSTACK = <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="6-3-JVM层级（Hotspot）"><a href="#6-3-JVM层级（Hotspot）" class="headerlink" title="6.3. JVM层级（Hotspot）"></a>6.3. JVM层级（Hotspot）</h3><p>InterpreterRuntime:: monitorenter方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IRT_ENTRY_NO <span class="title">ASYNC</span><span class="params">(<span class="keyword">void</span>, InterpreterRuntime::monitorenter(JavaThread* thread,</span></span></span><br><span class="line"><span class="function"><span class="params">BasicobjectLock* e1em))</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">ifdef</span> ASSERT</span></span></span><br><span class="line">thread-&gt;last_frame().interpreter._frame_verify_monitor(elem) ;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (PrintBiasedLockingstatistics) &#123;</span><br><span class="line">Atomic::inc(BiasedLocking::s1ow_path_entry_count_addr());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function">Handle <span class="title">h_obj</span><span class="params">(thread, elem-&gt;obj())</span></span>;</span><br><span class="line">assert(Universe::heap()-&gt;is_in_reserved_or_nu11(h_obj()),</span><br><span class="line"><span class="string">"must be NULL or an object"</span>);</span><br><span class="line"><span class="keyword">if</span> (UseBiasedLocking) &#123;</span><br><span class="line"><span class="comment">// Retry fast entry if bias is revoked to avoid unnecessary inflation</span></span><br><span class="line">ObjectSynchronizer::fast_enter(h_obj, e1em-&gt;<span class="number">1</span>ock())， <span class="literal">true</span>, CHECK);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Objectsynchronizer::s1ow_enter(h_obj，e1em-&gt;<span class="number">1</span>ock())， CHECK);</span><br><span class="line">&#125;</span><br><span class="line">assert(Universe::heap(-&gt;is_in_reserved_or_nu11(e1em-&gt;obj()),</span><br><span class="line"><span class="string">"must be NULL or an object"</span>);</span><br><span class="line">#ifdef ASSERT</span><br><span class="line">thread-&gt;last_frame().interpreter_frame_verify_monitor(elem);</span><br><span class="line">#endif</span><br><span class="line">IRT_END</span><br></pre></td></tr></table></figure><h2 id="7-锁升级过程"><a href="#7-锁升级过程" class="headerlink" title="7. 锁升级过程"></a>7. 锁升级过程</h2><h3 id="7-1-JDK8-markword实现表"><a href="#7-1-JDK8-markword实现表" class="headerlink" title="7.1. JDK8 markword实现表"></a>7.1. JDK8 markword实现表</h3><img src="/2020/05/28/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized%E8%BF%9B%E9%98%B6%E7%89%88/image-20200528004452328.png" class=""><img src="/2020/05/28/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized%E8%BF%9B%E9%98%B6%E7%89%88/image-20200528001544200.png" class=""><p><strong>自旋锁什么时候升级为重量级锁？</strong></p><p>竞争加剧:有线程超过10次自旋，-XX:PreBlockSpin， 或者自旋线程数超过CPU核数的一半，1.6之后， 加入</p><p>自适应自旋Adapative Self Spinning，JVM自己控制</p><p><strong>为什么有自旋锁还要重量级锁？</strong></p><p>自旋是消耗CPU资源的，如果锁得时间长，或者自旋线程多，CPU会被大量消耗</p><p>重量级锁有等待队列，所有拿不到锁得进入等待队列，不需要消耗CPU资源</p><p><strong>偏向锁是否一定比自旋锁效率高?</strong></p><p>不一定，在明确知道会有多线程竞争得情况下，偏向锁肯定会涉及锁撤销，这时候直接使用自旋锁</p><p>JVM启动过程，会有很多线程竞争（明确），所以默认情况启动时不打开偏向锁，过一段时间再打开</p><p><code>-XX:BiasedLockingStartupDelay=0</code></p><hr><p>new -偏向锁-轻量级锁(无锁, 自旋锁，自适应自旋) - 重量级锁</p><p>synchronized优化的过程和markword息息相关</p><p>用markword中最低的三位代表锁状态其中1位是偏向锁位两位是普通锁位</p><ol><li><p>Object 0 = new Object()</p><p>锁=0 01无锁态</p><p>注意:如果偏向锁打开，默认是匿名偏向状态</p></li><li><p>o.hashCode(</p><p>001 + hashcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00000001 10101101 00110100 00110110</span><br><span class="line">01011001 00000000 00000000 00000000</span><br></pre></td></tr></table></figure><p>little endian big endian</p><p>00000000 00000000 00000000 01011001 00110110 00110100 10101101 00000000</p></li><li><p>默认synchronized(o)</p><p>00-&gt;轻量级锁</p><p>默认情况偏向锁有个时延，默认是4秒</p><p>why?因为IVM虚拟机自己有一一些默认启动的线程， 里面有好多sync代码,这些sync代码启动时就知道肯定会</p><p>有竞争，如果使用偏向锁，就会造成偏向锁不断的进行锁撤销和锁升级的操作,效率较低。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:BiasedLockingStartupDelay&#x3D;0</span><br></pre></td></tr></table></figure></li><li><p>如果设定上述参数</p><p>new Object() -&gt; 101偏向锁 -&gt;线程ID为0 -&gt; Anonymous BiasedLock</p><p>打开偏向锁，new出来的对象，默认就是一个可偏向匿名对象101</p></li><li><p>如果有线程上锁</p><p>上偏向锁，指的就是,把markword的线程ID改为自己线程ID的过程</p><p>偏向锁不可重偏向批量偏向批量撤销</p></li><li><p>如果有线程竞争</p><p>撤销偏向锁，升级轻量级锁</p><p>线程在自己的线程栈生成L ockRecord，用CAS操作将markword设置为指向自己这个线程的LR的指针，设置</p><p>成功者得到锁</p></li><li><p>如果竞争加剧</p><p>竞争加剧:有线程超过10次自旋，-XX:PreBlockSpin， 或者自旋线程数超过CPU核数的一半，1.6之后， 加入</p><p>自适应自旋Adapative Self Spinning，JVM自己控制</p><p>升级重旱级锁: -&gt; 向操作系统申请资源，linux mutex , CPU从3级-0级系统调用，线程挂起，进入等待队列，</p><p>等待操作系统的调度,然后再映射回用户空间</p></li></ol><p>(以上实验环境是JDK11,打开就是偏向锁，而JDK8默认对象头是无锁)<br>偏向锁默认是打开的，但是有一一个时延，如果要观察到偏向锁，应该设定参数</p><p><strong>如果计算过对象的hashCode,则对象无法进入偏向状态!</strong></p><p>轻量级锁重量级锁的hashCode存在与什么地方?</p><p>答案:线程栈中，轻量级锁的LR中，或是代表重量级锁的ObjectMonitor的成员中</p><p><strong>关于epoch: (不重要)</strong></p><p><strong>批量重偏向与批量撤销</strong> 渊源:从偏向锁的加锁解锁过程中可看出，当只有一个线程反复进入同步块时，<br>偏向锁带来的性能开销基本可以忽略，但是当有其他线程尝试获得锁时，就需要等到safe point时，再将偏向<br>锁撤销为无锁状态或升级为轻量级，会消耗一定的性能， 所以在多线程竞争频繁的情况下，偏向锁不仅不能<br>提高性能，还会导致性能下降。于是，就有了批量重偏向与批量撤销的机制。</p><p><strong>原理</strong>以class为单位，为每个class维护解决场景批量重偏向(bulk rebias)机制是为了解决:一个线程创建了<br>大量对象并执行了初始的同步操作,后来另-个线程也来将这些对象作为锁对象进行操作,这样会导致大量<br>的偏向锁撤销操作。批量撤销(bulk revoke)机制是为了解决:在明显多线程竞争剧烈的场景下使用偏向锁<br>是不合适的。</p><p>一个偏向锁撤销计数器，每一-次该class的对象发生偏向撤销操作时，该计数器+1,当这个值达到重偏向阈值<br>(默认20)时，JVM就认为该class的偏向锁有问题，因此会进行批量重偏向。每个class对象会有一个对应的<br>epoch字段，每个处于偏向锁状态对象的Mark Word中也有该字段,其初始值为创建该对象时class中的<br>epoch的值。每次发生批量重偏向时，就将该值+1, 同时遍历JVM中所有线程的栈，找到该class所有正处于<br>加锁状态的偏向锁，将其epoch字段改为新值。下次获得锁时，发现当前对象的epoch值和lass的epoch不相<br>等,那就算当前已经偏向了其他线程，也不会执行撤销操作,而是直接通过CAS操作将其Mark Word的<br>Thread Id改成当前线程ld.当达到重偏向阈值后，假设该class计数器继续增长,当其达到批量撤销的阈值后<br>(默认40)，JVM就认为该class的使用场景存在多线程竞争，会标记该class为不可偏向，之后，对于该class<br>的锁，直接走轻量级锁的逻辑。</p><h3 id="7-2-锁重入"><a href="#7-2-锁重入" class="headerlink" title="7.2. 锁重入"></a>7.2. 锁重入</h3><p>synchronized是可重入锁</p><p>重入次数必须记录，因为要解锁几次必须得对应</p><p>偏向锁 -&gt; 线程栈 -&gt; LR + 1</p><p>重量级锁 -&gt; ? ObjectMonitor字段上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Synchronized&quot;&gt;&lt;a href=&quot;#Synchronized&quot; class=&quot;headerlink&quot; title=&quot;Synchronized&quot;&gt;&lt;/a&gt;Synchronized&lt;/h1&gt;&lt;h2 id=&quot;1-常见面试题&quot;&gt;&lt;a href=&quot;#1-常见面试
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="https://1194570458.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="https://1194570458.github.io/tags/Java/"/>
    
      <category term="Synchronized" scheme="https://1194570458.github.io/tags/Synchronized/"/>
    
  </entry>
  
  <entry>
    <title>什么是Synchronized</title>
    <link href="https://1194570458.github.io/2020/05/26/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized/"/>
    <id>https://1194570458.github.io/2020/05/26/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized/</id>
    <published>2020-05-25T16:24:35.000Z</published>
    <updated>2020-05-25T16:28:48.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h1><h2 id="复习一下Synchronized用法"><a href="#复习一下Synchronized用法" class="headerlink" title="复习一下Synchronized用法"></a>复习一下Synchronized用法</h2><p>Synchronzied锁定的是对象，而不是代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object o = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        synchronized (this)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">n</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        synchronized (T.class)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字节码的实现"><a href="#字节码的实现" class="headerlink" title="字节码的实现"></a>字节码的实现</h2><p>在Idea运行以上代码，然后View-&gt; ShowBytecode</p><p>注意：监视器（monitor）</p><p>MONITORENTER</p><p>MONITOREXIT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">([Ljava/lang/String;)</span>V</span></span><br><span class="line"><span class="function">   TRYCATCHBLOCK L0 L1 L2 <span class="keyword">null</span></span></span><br><span class="line"><span class="function">   TRYCATCHBLOCK L2 L3 L2 <span class="keyword">null</span></span></span><br><span class="line"><span class="function">  L4</span></span><br><span class="line"><span class="function">   LINENUMBER 16 L4</span></span><br><span class="line"><span class="function">   GETSTATIC top/kason/test/T.o : Ljava/lang/Object</span>;</span><br><span class="line">   DUP</span><br><span class="line">   ASTORE <span class="number">1</span></span><br><span class="line">   MONITORENTER <span class="comment">// 上锁</span></span><br><span class="line">  L0</span><br><span class="line">   LINENUMBER <span class="number">17</span> L0</span><br><span class="line">   GETSTATIC java/lang/System.out : Ljava/io/PrintStream;</span><br><span class="line">   LDC <span class="string">"Hello!"</span></span><br><span class="line">   INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V</span><br><span class="line">  L5</span><br><span class="line">   LINENUMBER <span class="number">18</span> L5</span><br><span class="line">   ALOAD <span class="number">1</span></span><br><span class="line">   MONITOREXIT <span class="comment">// 释放锁</span></span><br><span class="line">  L1</span><br><span class="line">   GOTO L6</span><br><span class="line">  L2</span><br><span class="line">  FRAME FULL [[Ljava/lang/String; java/lang/Object] [java/lang/Throwable]</span><br><span class="line">   ASTORE <span class="number">2</span></span><br><span class="line">   ALOAD <span class="number">1</span></span><br><span class="line">   MONITOREXIT <span class="comment">// 释放锁 发生异常后释放锁</span></span><br><span class="line">  L3</span><br><span class="line">   ALOAD <span class="number">2</span></span><br><span class="line">   ATHROW</span><br><span class="line">  L6</span><br><span class="line">   LINENUMBER <span class="number">19</span> L6</span><br><span class="line">  FRAME CHOP <span class="number">1</span></span><br><span class="line">   RETURN</span><br><span class="line">  L7</span><br><span class="line">   LOCALVARIABLE args [Ljava/lang/String; L4 L7 <span class="number">0</span></span><br><span class="line">   MAXSTACK = <span class="number">2</span></span><br><span class="line">   MAXLOCALS = <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="JVM的实现（Hostpot）"><a href="#JVM的实现（Hostpot）" class="headerlink" title="JVM的实现（Hostpot）"></a>JVM的实现（Hostpot）</h2><p>从锁到锁升级的故事：《没错，我就是厕所所长》</p><hr><p>加锁，指的是锁定对象</p><h3 id="对象在内存中的存储布局"><a href="#对象在内存中的存储布局" class="headerlink" title="对象在内存中的存储布局"></a>对象在内存中的存储布局</h3><table><thead><tr><th align="center">对象头</th></tr></thead><tbody><tr><td align="center">类型指针</td></tr><tr><td align="center">实例数据</td></tr><tr><td align="center">对齐</td></tr></tbody></table><img src="/2020/05/26/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized/image-20200526002700999.png" class=""><p>在64位的虚拟机上，对象头部占8个字节</p><ol><li><strong>实例数据</strong>：存放类的属性数据信息，包括父类的属性信息；</li><li><strong>对齐填充</strong>：由于虚拟机要求 <strong>对象起始地址必须是8字节的整数倍</strong>。填充数据不是必须存在的，仅仅是为了字节对齐；</li><li><strong>对象头</strong>：<strong>Java对象头一般占有2个机器码</strong>（在32位虚拟机中，1个机器码等于4字节，也就是32bit，在64位虚拟机中，1个机器码是8个字节，也就是64bit），但是 <strong>如果对象是数组类型，则需要3个机器码，因为JVM虚拟机可以通过Java对象的元数据信息确定Java对象的大小</strong>，但是无法从数组的元数据来确认数组的大小，所以用一块来记录数组长度。</li></ol><h3 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h3><img src="/2020/05/26/%E4%BB%80%E4%B9%88%E6%98%AFSynchronized/image-20200525221848695.png" class=""><h3 id="锁的升级过程"><a href="#锁的升级过程" class="headerlink" title="锁的升级过程"></a>锁的升级过程</h3><p>JDK较早的版本，锁是利用到OS的资源（互斥量），每次都要经历 用户态-&gt;内核态的转换【开销较大，重量级，效率比较低】</p><p>现代版本进行了优化：无锁-&gt;偏向锁-&gt;轻量级锁（自旋锁）-&gt;重量级锁</p><h3 id="初创对象（64位）"><a href="#初创对象（64位）" class="headerlink" title="初创对象（64位）"></a>初创对象（64位）</h3><table><thead><tr><th align="center">unused<br />25</th></tr></thead><tbody><tr><td align="center">(identity)<br />hashcode<br />31</td></tr><tr><td align="center">unused<br />1</td></tr><tr><td align="center">分代年龄age<br />4</td></tr><tr><td align="center">是否偏向锁<br />1位（初创对象0：不是偏向锁）</td></tr><tr><td align="center">锁标志位<br />2位</td></tr></tbody></table><h3 id="调用synchronized-对象-过程："><a href="#调用synchronized-对象-过程：" class="headerlink" title="调用synchronized(对象)过程："></a>调用synchronized(对象)过程：</h3><h4 id="无锁升级为偏向锁"><a href="#无锁升级为偏向锁" class="headerlink" title="无锁升级为偏向锁"></a>无锁升级为偏向锁</h4><p>偏向锁 - markword上记录当前线程指针，下次同一个线程加锁的时候，不需要争用，只需要判断线程指针是否同<br>一个，所以，偏向锁，偏向加锁的第一个线程，hastCode备份在线程栈上，线程销毁，锁降级为无锁</p><ul><li><p>第一次调用</p><p>查询锁标志位-&gt;01-&gt;查询是否偏向锁（不是偏向锁 0）-&gt;设置为偏向锁（偏向锁 1）并记录线程ID（抹掉hashcode）-&gt;加锁成功</p></li><li><p>第二次调用（同线程）</p><p>检查线程ID是否自己-&gt;是则加锁成功</p></li></ul><h4 id="偏向锁升级为轻量锁"><a href="#偏向锁升级为轻量锁" class="headerlink" title="偏向锁升级为轻量锁"></a>偏向锁升级为轻量锁</h4><p>有争用 - 锁升级为轻量级锁 - 每个线程有自己的LockRecord在自己的线程栈上，用CAS去争用markword的LR的指针，指针指向哪个线程的LR，哪个线程就拥有锁</p><ul><li>每个线程调用，查询锁标志位，发现是偏向锁，则开辟自己线程栈中的内存，记录偏向锁的内容，修改mark word记录偏向锁的内容，指向自己线程栈中记录的指针（CAS替换）。如果成功修改指针，则成功获取到锁。</li><li>如果修改指针失败，则开始自旋，自旋10次后自动升级为重量级锁 （-XX:+PreBlockSpin 来指定次数）</li></ul><h4 id="轻量锁升级为重量锁"><a href="#轻量锁升级为重量锁" class="headerlink" title="轻量锁升级为重量锁"></a>轻量锁升级为重量锁</h4><p>自施超过10次，升级为重星级锁-如果太多线程自旋CPU消耗过大，不如升级为重量级锁，进入等待队列(不消<br>耗CPU)</p><ul><li>mark word指向monitor对象（C++对象）-&gt;线程阻塞并进入EntryList</li></ul><h3 id="锁的效率问题"><a href="#锁的效率问题" class="headerlink" title="锁的效率问题"></a>锁的效率问题</h3><p>偏向锁由于有锁撒销的过程revoke,会消耗系统资源，所以，在锁争用特别激烈的时候，用偏向锁未必效率高。<br>还不如直接使用轻量级锁。</p><h2 id="C-的实现"><a href="#C-的实现" class="headerlink" title="C++的实现"></a>C++的实现</h2><p>操作系统的一些辅助类和数据结构</p><h2 id="CPU的实现"><a href="#CPU的实现" class="headerlink" title="CPU的实现"></a>CPU的实现</h2><p><a href="https://blog.csdn.net/21aspnet/article/details/88571740" target="_blank" rel="noopener">https://blog.csdn.net/21aspnet/article/details/88571740</a><br>使用lock comxchg实现</p><h1 id="Synchronized-vs-Lock（CAS）"><a href="#Synchronized-vs-Lock（CAS）" class="headerlink" title="Synchronized vs Lock（CAS）"></a>Synchronized vs Lock（CAS）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在高争用 高耗时的环境下synchronized效率更高</span><br><span class="line">在低争用 低耗时的环境下CAS效率更高</span><br><span class="line">synchronized到重量级之后是等待队列 (不消耗CPU)</span><br><span class="line">CAS (等待期间消耗CPU)</span><br><span class="line"></span><br><span class="line">一切以压测为准</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Synchronized&quot;&gt;&lt;a href=&quot;#Synchronized&quot; class=&quot;headerlink&quot; title=&quot;Synchronized&quot;&gt;&lt;/a&gt;Synchronized&lt;/h1&gt;&lt;h2 id=&quot;复习一下Synchronized用法&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="https://1194570458.github.io/tags/JVM/"/>
    
      <category term="Java" scheme="https://1194570458.github.io/tags/Java/"/>
    
      <category term="Synchronized" scheme="https://1194570458.github.io/tags/Synchronized/"/>
    
  </entry>
  
  <entry>
    <title>什么是redis</title>
    <link href="https://1194570458.github.io/2020/05/23/%E4%BB%80%E4%B9%88%E6%98%AFredis/"/>
    <id>https://1194570458.github.io/2020/05/23/%E4%BB%80%E4%B9%88%E6%98%AFredis/</id>
    <published>2020-05-23T13:46:28.000Z</published>
    <updated>2020-05-23T13:48:35.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是redis，有哪些特征"><a href="#什么是redis，有哪些特征" class="headerlink" title="什么是redis，有哪些特征"></a>什么是redis，有哪些特征</h2><p>基于内存（快）</p><p>k，V （多数做缓存）</p><p>单线程（worker） ，iothreads</p><p>连接很多（连接池很多） ： nio多路复用（epoll）</p><p>V：类型（5）</p><p>本地方法：计算向数据移动，IO优化</p><p>整体模型，串行化/原子操作： 并行 VS 串行谁更优</p><h3 id="mamcached"><a href="#mamcached" class="headerlink" title="mamcached"></a>mamcached</h3><p>k，v（string） </p><p>任何数据可以用json字符串存取，但数据传输一个整体，取某个值需要在本地计算</p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>存： Ipush a “{a,b,c}”，识别数组 ，取 index(2)：具有本地方法，发指定下标取回指定的数据，计算在redis内</p><h3 id="worker单线程"><a href="#worker单线程" class="headerlink" title="worker单线程"></a>worker单线程</h3><ol><li><p>通过kernel :epoll 获取哪些数据可以读 （ io event）</p></li><li><p>主动去kernel获取客户端数据 （io读取，串行化）</p><blockquote><p>6.x以后可以开启 iothreads （获取io数据时是多线程并行）</p></blockquote></li><li><p>计算set get操作 （ 串行化）</p></li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>Value: nosql</p><ol><li><p>String</p><ul><li><p>字符串操作</p></li><li><p>数值计算</p><blockquote><p>场景：session共享，kv缓存，计数器，fs文件系统（小文件，对磁盘io影响很大）</p></blockquote></li><li><p>（二进制）位运算</p><blockquote><p>场景：bitmap 【任意统计】</p><ol><li><p>统计一年用户登录天数（具体哪天），第五天 setbit 4 1 第365天 setbit 364 1</p></li><li><p>假如要派发礼品，统计活跃用户数 （数据过大做分桶）：</p><p>setbit 20200101(日期) 8(id) 1(已登录) </p><p>setbit 20200101(日期) 3(id) 1(已登录) </p><p>setbit 20200102(日期) 8(id) 1(已登录) </p><p>bitop or result 20200101 20200102；bitcount result（活跃用户数为 2） </p></li></ol></blockquote></li></ul><p>strlen 计算的是占用字节</p><p>具有二进制安全，byte[]类型</p></li><li><p>List</p><p>value：双向链表；key：两个指针分别指向链表头尾（O(1)）</p><p>组合：同向 lpush lpop 栈；异向 lpush rpop 队列；lidex 数组；ltrim 优化redis 内存量</p><blockquote><p>场景：评论列表；消息队列；替代 java 容器（map，list），让jvm无状态（挂了数据不丢失）、数据共享</p></blockquote></li><li><p>hash</p><p>hashtable 分治</p><blockquote><p>场景：聚集数据（根据订单id查询 详情、评论、购买数 缓存起来）；表单详情页</p></blockquote></li><li><p>set</p><p>集合：无序，不重复</p><blockquote><p>场景：</p><ol><li>集合交并差（交集：共同好友，差集：好友推荐）【不推荐：单线程，cpu密集型，阻塞其他操作，多实例：不同实例干不同的事】</li><li>随机事件（抽奖，验证码，扑克牌游戏）srandemember [count] 正数：返回不重复的集合，负数：返回可重复集合</li></ol></blockquote></li><li><p>sorted set（zset）</p><blockquote><p>场景：</p><ol><li>排行榜</li><li>评论：无序，分页</li></ol></blockquote></li></ol><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>redis</p><p>持久化</p><p>问题-&gt;分布式</p><hr><p>cap/paxos/raft/akf</p><ol><li><p>RDB、image、bak 拍快照（时间点）</p><p>全量，丢失量比较大；体积相近内存大小；恢复速度取决于磁盘io速度-&gt;快</p></li><li><p>AOF 日志</p><p>趋向于实时；会丢数据</p><p>sync 性能下降</p><p>os：pagecache 丢失 5秒/ 10%内存（30%内存 阻塞）</p><p>每秒</p></li></ol><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>如果手动开启aof，在4.x以前，只会读取aof内容，不会读rdb</p><ul><li>如果redis运行了10年，内存4g，AOF文件大小可以达到1T，因为他是追加命令。解决办法：重写（rewrite）：失效、无用、重复，条件满足后触发（4.x以前）。4.x以后：拍一个快照，然后在后面继续追加指令，RDB+AOF</li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><h4 id="辩证"><a href="#辩证" class="headerlink" title="辩证"></a>辩证</h4><p>（快，内存）-&gt;当缓存：不建议开持久化-&gt;重启丢失数据-&gt;最快的缓存方案：1.RDB+AOF 2.主从复制</p><p>​                       -&gt;当数据库DB：AOFsync、主从强一致性-&gt;性能降低接近mysql</p><h4 id="单点故障（不可用）"><a href="#单点故障（不可用）" class="headerlink" title="单点故障（不可用）"></a>单点故障（不可用）</h4><ul><li>全量（主从复制）【高可用】</li><li>主备</li></ul><h4 id="压力-性能"><a href="#压力-性能" class="headerlink" title="压力/性能"></a>压力/性能</h4><ul><li>扩容（分片），不是全量数据，全量主从复制</li></ul><h4 id="同步数据"><a href="#同步数据" class="headerlink" title="同步数据"></a>同步数据</h4><ul><li>强一致性：主从复制，会造成不可用性（CAP定理）</li><li>弱一致性：redis默认</li><li>最终一致性：主-&gt;黑盒（不会挂，强一致性）-&gt;从</li></ul><p>开启强一致性，开启AOF、RDB，性能大降</p><h5 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h5><p>3台主机中至少两两通讯，如果断掉一台，添加数据可以成功，断掉的那台就不能对外提供服务，保证了数据强一致性。弱断掉的那台重新加入集群中，必须同步数据，后再对外提供服务</p><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>redis、zookeeper、etcd</p><p>不靠谱，金融类 no；互联网类 yes</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是redis，有哪些特征&quot;&gt;&lt;a href=&quot;#什么是redis，有哪些特征&quot; class=&quot;headerlink&quot; title=&quot;什么是redis，有哪些特征&quot;&gt;&lt;/a&gt;什么是redis，有哪些特征&lt;/h2&gt;&lt;p&gt;基于内存（快）&lt;/p&gt;
&lt;p&gt;k，V （多数
      
    
    </summary>
    
    
    
      <category term="Redis" scheme="https://1194570458.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>JVM调优实战</title>
    <link href="https://1194570458.github.io/2020/05/23/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/"/>
    <id>https://1194570458.github.io/2020/05/23/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/</id>
    <published>2020-05-23T13:45:22.000Z</published>
    <updated>2020-05-24T15:00:56.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="大厂真题：2019年遇到的关于JVM-GC的问题"><a href="#大厂真题：2019年遇到的关于JVM-GC的问题" class="headerlink" title="大厂真题：2019年遇到的关于JVM GC的问题"></a>大厂真题：2019年遇到的关于JVM GC的问题</h2><ol><li>GMS和G1的异同 - 百度</li><li>G1什么时候引发Full GC - 百度</li><li>说一个最熟悉的垃圾回收算法 - 百度</li><li>吞吐量优先和响应时间优先的回收器有哪些 - 百度</li><li>怎么判断内存泄漏 - 顺丰</li><li>讲一下CMS的流程 - 顺丰</li><li>为什么压缩指针超过32G失效 - 京东</li><li>什么是内存泄漏？GC调优有经验吗？一般出现GC问题你怎么解决？ -  淘宝</li><li>THreadLocal有没有内存写漏问题 - 阿里 蘑菇街（弱指针）</li><li>G1两个Region不是连续的，而且之间还有可达的引用，我现在要回收一个，另一个怎么处理？ - 阿里（写屏障）</li><li>讲一下JVM堆内存管理（对象分配过程） - 阿里</li><li>听说过CMS的并发预处理和并发可中断预处理吗 - 阿里</li><li>到底多大的对象会被直接扔到老年代 - 阿里</li><li>用一句话说明你的JVM水平很牛 - 某个有病的企业</li></ol><h1 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h1><ul><li><p>Mark-Sweep（标记清除）</p><p>会产生碎片</p><img src="/2020/05/23/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/image-20200524000022416.png" class=""></li><li><p>Copying（拷贝）</p><p>内存浪费</p><img src="/2020/05/23/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/image-20200524000135753.png" class=""></li><li><p>Mark-Compact（标记压缩）</p><p>效率比copy低</p><img src="/2020/05/23/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/image-20200524000156824.png" class=""></li></ul><h1 id="常见的垃圾回收器"><a href="#常见的垃圾回收器" class="headerlink" title="常见的垃圾回收器"></a>常见的垃圾回收器</h1><p>Garbage Collectors（JDK 1.0 - JDK 14）</p><img src="/2020/05/23/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/image-20200524000248378.png" class=""><ol><li><p>垃圾回收器的发展路线，是随着内存越来越大的过程而演进</p><p>从分代算法演化到不分代算法</p><p>Serial算法几十兆<br>Parallel算法几个G<br>CMS几十个G -承上启下，开始并发回收</p><blockquote><p>三色标记-错标- Incremental Update - Remark</p></blockquote><p>G1上百G内存-逻辑分代，物理不分代</p><blockquote><p>三色标记+SATB</p></blockquote><p>ZGC . Shenandoah - 4T -逻辑物理都不分代</p><blockquote><p>ColoredPointer（颜色指针 着色指针）</p></blockquote><p>Epsilon -啥也不干(调试，确认不用GC参与就能干完活儿)</p></li><li><p>JDK诞生Serial追随提高效率,诞生了PS,为了配合CMS,诞生了PN, CMS是1 .4版本后期引入，CMS是里程<br>碑式的GC，它开启了并发回收的过程，但是CMS毛病较多,因此目前任何一个JDK版本默认是CMS<br>并发垃圾回收是因为无法忍受STW</p></li><li><p>Serial年轻代串行回收</p></li><li><p>PS年轻代并行回收</p></li><li><p>ParNew年轻代配合CMS的并行回收</p></li><li><p>SerialOld</p></li><li><p>ParallelOld</p></li><li><p>ConcurrentMarkSweep老年代并发的，垃圾回收和应用程序同时运行, 降低STW的时间(200ms)<br>CMS问题比较多，所以现在没有一个版本默认是CMS，只能手工指定<br>CMS既然是MarkSweep,就一-定会有碎片化的问题，碎片到达一定程度， CMS的老年代分配对象分配不下的<br>时候，使用SerialOld 进行老年代回收<br>想象-下:<br>PS + PO -&gt;加内存换垃圾回收器-&gt; PN + CMS + SerialOld (几个小时-几天的STW)<br>几十个G的内存，单线程回收-&gt; G1 + FGC几十个G -&gt;.上T内存的服务器ZGC<br>算法:三色标记+ Incremental Update</p></li><li><p>G1(200ms - 10ms)<br>算法:三色标记+ SATB</p></li><li><p>ZGC (10ms- 1ms) PK C++<br>算法: ColoredPointers + LoadBarrier</p></li><li><p>Shenandoah<br>算法: ColoredPointers + WriteBarrier</p></li><li><p>Eplison</p></li><li><p>PS和PN区别的延伸阅读:<br><a href="https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html#GUID-3D0BB91E-9BFF-4EBB-" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html#GUID-3D0BB91E-9BFF-4EBB-</a><br>B523-1 4493A860E73<br>14.垃圾收集器跟内存大小的关系</p></li><li><p>Serial几十兆</p></li><li><p>PS上百兆-几个G</p></li><li><p>CMS- 20G<br>I</p></li><li><p>G1-上百G</p></li><li><p>ZGC.4T- 16T UDK13)</p></li></ol><p>1.8默认的垃圾回收: PS + ParallelOld</p><h1 id="常见垃圾回收器组合参数设定-1-8"><a href="#常见垃圾回收器组合参数设定-1-8" class="headerlink" title="常见垃圾回收器组合参数设定: (1.8)"></a>常见垃圾回收器组合参数设定: (1.8)</h1><ul><li><p>-XX:+UseSerialGC = Serial New (DefNew) + Serial Old</p><ul><li>小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和DK版本自动选择收集器</li></ul></li><li><p>-XX:+UseParNewGC = ParNew + SerialOld</p><ul><li>这个组合已经很少用(在某些版本中已经废弃)</li><li><a href="https://stackoverflow.com/questions/34962257/why-remove-support-for-parnewserialold-anddefnewcms-in-the-future" target="_blank" rel="noopener">https://stackoverflow.com/questions/34962257/why-remove-support-for-parnewserialold-anddefnewcms-in-the-future</a></li></ul></li><li><p>-XX:+UseConc(urrent)MarkSweepGC = ParNew + CMS + Serial Old</p></li><li><p>-XX:+UseParallelGC = Parallel Scavenge + Parallel Old (1.8默认) [ PS + SerialOld]</p></li><li><p>-XX:+UseParallelOldGC = Parallel Scavenge + Parallel Old</p></li><li><p>-XX:+UseG1GC = G1</p></li><li><p>Linux中没找到默认GC的查看方法，而windows中会打印UseParallelGC</p><ul><li>java +XX:+PrintCommandLineFlags -version</li><li>通过GC的日志来分辨</li></ul></li><li><p>Linux下1.8版本默认的垃圾回收器到底是什么?</p><ul><li>1.8.0. .181默认(看不出来) Copy MarkCompact</li><li>1.8.0_222默认PS+PO</li></ul></li></ul><h1 id="调优前的基础概念"><a href="#调优前的基础概念" class="headerlink" title="调优前的基础概念:"></a>调优前的基础概念:</h1><ol><li>吞吐量:用户代码时间1 (用户代码执行时间+垃圾回收时间)</li><li>响应时间: STW越短，响应时间越好</li></ol><p>所谓调优，首先确定，追求啥?吞吐量优先，还是响应时间优先?还是在满足一定的响应时间的情况下，要求达到</p><p>多大的吞吐量…</p><p>问题: </p><p>科学计算，吞吐量。数据挖掘，thrput。 吞吐量优先的一-般: (PS+ PO)</p><p>响应时间:网站GUIAPI (1.8G1) </p><h1 id="什么是调优"><a href="#什么是调优" class="headerlink" title="什么是调优?"></a>什么是调优?</h1><ol><li><p>根据需求进行JVM规划和预调优</p></li><li><p>优化运行JVM运行环境(慢，卡顿)</p></li><li><p>解决JVM运行过程中出现的各种问题(O0M)</p></li></ol><h1 id="JVM调优第一步，了解JVM常用命令行参数"><a href="#JVM调优第一步，了解JVM常用命令行参数" class="headerlink" title="JVM调优第一步，了解JVM常用命令行参数"></a>JVM调优第一步，了解JVM常用命令行参数</h1><ul><li><p>JVM的命令行参数参考: <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p></li><li><p>HotSpot参数分类</p><blockquote><p>标准: - 开头,所有的HotSpot都支持</p><p>非标准: -X 开头，特定版本HotSpot支持特定命令</p><p>不稳定: -XX 开头，下个版本可能取消</p></blockquote><p>java -version</p><p>java -X</p><p>打印所有参数</p><p>java -XX:+PrintFlagsWithComments // 只有debug版本能用，编程debug版本jdk</p></li></ul><p>试验用程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java. util.List;</span><br><span class="line"><span class="keyword">import</span> java. util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">He11oGC</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System. out. print1n(<span class="string">"He11oGC!"</span>);</span><br><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="keyword">for</span>(;;) &#123;</span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span> [<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">list. add(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>区分概念:内存泄漏memory leak,内存溢出out of memory</p></li><li><p>java -XX:+ PrintCommandLineFlags HelloGC</p></li><li><p>java -Xmn10M -Xms40M -Xmx60M -XX:+PrintCommandLineFlags -XX:+PrintGC HelloGC<br>PrintGCDetails PrintGCTimeStamps PrintGCCauses</p></li><li><p>java -XX:+UseConcMarkSweepGC -XX:+PrintCommandLineFlags HelloGC</p></li><li><p>java -XX:+PrintFlagsInitial默认参数值</p></li><li><p>java -XX:+ PrintFlagsFinal最终参数值</p></li><li><p>java -XX:+PrintFlagsFinal | grep xxx找到对应的参数</p></li><li><p>java -XX:+PrintFlagsFinal -version |grep GC</p></li><li><p>java -XX:+PrintFlagsFinal -version | WC-I<br>共728个参数</p></li></ol><h1 id="PS-GC日志详解"><a href="#PS-GC日志详解" class="headerlink" title="PS GC日志详解"></a>PS GC日志详解</h1><p>每种垃圾回收器的日志格式是不同的.</p><p>PS日志格式</p><img src="/2020/05/23/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/image-20200524141306845.png" class=""><p>heap dump部分:</p><p>eden space 5632K， 94% used [000000000ff980000 , 00000000ffeb 3e28，0x0000000fff00000)</p><p>后面的内存地址指的是，起始地址，使用空间结束地址，整体空间结束地址</p><img src="/2020/05/23/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/image-20200524141412577.png" class=""><p>total = eden + 1个survivor</p><h1 id="调优前的基础概念-1"><a href="#调优前的基础概念-1" class="headerlink" title="调优前的基础概念:"></a>调优前的基础概念:</h1><ol><li><p>吞吐量:用户代码时间/ (用户代码执行时间+垃圾回收时间)</p></li><li><p>响应时间: STW越短,响应时间越好</p></li></ol><p>所谓调优，首先确定，追求啥?吞吐量优先，还是响应时间优先?还是在满足一定的响应时间的情况下，要求达到多大的吞吐量…</p><p>问题:</p><p>科学计算，吞吐量。数据挖掘，thrput. 吞吐量优先的- -般: (PS+ PO)</p><p>响应时间:网站GUIAPI (1.8G1)</p><h1 id="什么是调优-1"><a href="#什么是调优-1" class="headerlink" title="什么是调优?"></a>什么是调优?</h1><ol><li><p>根据需求进行JVM规划和预调优</p></li><li><p>优化运行JVM运行环境(慢，卡顿)</p></li><li><p>解决JVM运行过程中出现的各种问题(OOM)</p></li></ol><h1 id="调优，从规划开始"><a href="#调优，从规划开始" class="headerlink" title="调优，从规划开始"></a>调优，从规划开始</h1><ul><li><p>调优，从业务场景开始，没有业务场景的调优都是耍流氓</p></li><li><p>无监控(压力测试，能看到结果)，不调优</p></li><li><p>步骤:</p></li></ul><ol><li><p>熟悉业务场景(没有最好的垃圾回收器，只有最合适的垃圾回收器)</p><ol><li>响应时间、停顿时间[CMS G1 ZGC] (需要给用户作响应)</li><li>吞吐量=用户时间/(用户时间+ GC时间) [PS]</li></ol></li><li><p>选择回收器组合</p></li><li><p>计算内存需求(经验值1.5G 16G)</p></li><li><p>选定CPU (越高越好)</p></li><li><p>设定年代大小、升级年龄</p></li><li><p>设定日志参数</p><ol><li>-Xlogg:/optxx/xx.xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5<br>-XX:GCLogFileSize=20M -XX:+PrintGCDetails -XX:+ PrintGCDateStamps -XX:+PrintGCCause</li><li>或者每天产生-个日志文件</li></ol></li><li><p>观察日志情况</p></li></ol><ul><li><p>案例1:垂直电商，最高每日百万订单，处理订单系统需要什么样的服务器配置?</p><blockquote><p>这个问题比较业余，因为很多不同的服务器配置都能支撑(1.5G 16G)</p><p>1小时360000集中时间段，100个订单秒， (找- -小时内的高峰期，1000订单/秒)</p><p>经验值,</p><p>非要计算: -一个订单产生需要多少内存? 512K * 1000 500M内存</p><p>专业一点儿问法:要求响应时间100ms</p><p>压测! .</p></blockquote></li><li><p>案例2: 12306遭遇春节大规模抢票应该如何支撑?</p><blockquote><p>12306应该是中国并发量最大的秒杀网站:</p><p>号称并发量100W最高</p><p>CDN -&gt; LVS .&gt; NGINX -&gt;业务系统-&gt;每台机器1W并发(10K问题) 100台机器</p><p>普通电商订单&gt;下单-&gt;订单系统(10) 减库存&gt;等待用户付款</p><p>12306的一种可能的模型:下单 &gt;减库存和订单(redis kafka)同时异步进行-&gt;等付款</p><p>减库存最后还会把压力压到一台服务器</p><p>可以做分布式本地库存+单独服务路做库存均衡</p><p>大流量的处理方法:分而治之</p></blockquote></li><li><p>怎么得到一一个事务会消耗多少内存?</p><blockquote><ol><li>弄台机器，看能承受多少TPS？是不是达到目标？扩容或调优，让它达到</li><li>用压测来确定</li></ol></blockquote></li></ul><h1 id="优化环境"><a href="#优化环境" class="headerlink" title="优化环境"></a>优化环境</h1><ol><li><p>有一个50万PV的资料类网站(从磁盘提取文档到内存)原服务器32位, 1.5G的堆，用户反馈网站比较缓慢，因此公司决定升级，新的务器为64位，16G的堆内存，结果用户反馈卡顿十分严重,反而比以前效率更低了</p><ol><li><p>为什么原网站慢?</p><p>很多用户浏览数据，很多数据load到内存,内存不足，频繁GC， STW长， 响应时间变慢</p></li><li><p>为什么会更卡顿?</p><p>内存越大，FGC时间越长</p></li><li><p>咋办?</p><p>PS-&gt;PN+CMS或者G1</p></li></ol></li><li><p>系统CPU经常100%，如何调优? (面试高频)</p><p>CPU100%那么一定有线程在占用系统资源,</p><ol><li><p>找出哪个进程cpu高(top) </p></li><li><p>该进程中的哪个线程cpu高(top -Hp) </p></li><li><p>导出该线程的堆栈(jstack)</p></li><li><p>查找哪个方法(栈帧)消耗时间(jstack)</p></li><li><p>工作线程占比高|垃圾回收线程占比高</p></li></ol></li><li><p>系统内存飙高，如何查找问题? (面试高频)</p><ol><li><p>导出堆内存(jmap)</p></li><li><p>分析(jhat jvisualvm mat jprofiler .. )</p></li></ol></li><li><p>如何监控JVM</p><ol><li>jstat jvisualvm jprofiler arthas top…</li></ol></li></ol><h1 id="解决JVM运行中的问题"><a href="#解决JVM运行中的问题" class="headerlink" title="解决JVM运行中的问题"></a>解决JVM运行中的问题</h1><h2 id="一个案例理解常用工具"><a href="#一个案例理解常用工具" class="headerlink" title="一个案例理解常用工具"></a>一个案例理解常用工具</h2><ol><li><p>测试代码: .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.uti1.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.uti1.List;</span><br><span class="line"><span class="keyword">import</span> java.uti1.concurrent.scheduledThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoo1 Executor;</span><br><span class="line"><span class="keyword">import</span> java.uti1.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 从数据库中读取信用数据，套用模型，并把结果进行记录和传输</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 风险评估</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kason</span></span><br><span class="line"><span class="comment"> * date 2020-05-24</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 可能导致频繁FullGZ 或者 OOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FullGC_Problem01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CardInfo</span> </span>&#123;</span><br><span class="line">        BigDecimal price = <span class="keyword">new</span> BigDecimal(<span class="number">0.0</span>);</span><br><span class="line">        String name = <span class="string">"张三"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">5</span>;</span><br><span class="line">        Date birthdate = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ScheduledThreadPoolExecutor executor =</span><br><span class="line">            <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">50</span>,<span class="keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        executor.setMaximumPoolSize(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">            modelFit();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modelFit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;CardInfo&gt; takeList = getAllCardInfo();</span><br><span class="line">        takeList.forEach(info -&gt;&#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">            executor.scheduleWithFixedDelay(()-&gt;&#123;</span><br><span class="line">                <span class="comment">// do sth with info</span></span><br><span class="line">                info.m();</span><br><span class="line">            &#125;,<span class="number">2</span>,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;CardInfo&gt; <span class="title">getAllCardInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;CardInfo&gt; taskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            CardInfo ci =<span class="keyword">new</span> CardInfo();</span><br><span class="line">            taskList.add(ci);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> taskList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>java -Xms200M -Xmx200M -XX:+PrintGC FullGC_Problem01</p></li><li><p>一般是运维团队首先受到报警信息(CPU Memory)</p></li><li><p>top命令观察到问题:内存不断增长CPU占用率居高不下</p></li><li><p>top -Hp观察进程中的线程，哪个线程CPU和内存占比高</p></li><li><p>jps定位具体java进程<br>jstack定位线程状况，重点关注: WAITING BLOCKED<br>eg.<br>waiting on &lt;0000000088ca3310&gt; (a java.lang.Object)<br>假如有一个进程中100个线程，很多线程都在waiting on <xx>，一定要找到是哪个线程持有这把锁<br>怎么找？搜索jstack dump的信息，找<xx>，看哪个线程持有这把锁RUNNABLE<br>作业: 1：写一个死锁程序，用jstack观察 2：写一个程序,，一个线程持有锁不释放,其他线程等待</p></li><li><p>为什么阿里规范里规定，线程的名称(尤其是线程池)都要写有意义的名称<br>怎么样自定义线程池里的线程名称? (自定 义ThreadFactory)</p></li><li><p>jinfo pid</p></li><li><p>jstat -gc 动态观察gc情况 / 阅读GC日志发现频繁GC / arthas观察 / jconsole/jvisualVM/ Jprofiler (最好用)<br>jstat -gc 4655 500:每个500个毫秒打印GC的情况<br>如果面试官问你是怎么定位00M问题的?如果你回答用图形界面(错误)<br>1：已经上线的系统不用图形界面用什么? (cmdline arthas)<br>2：图形界面到底用在什么地方?测试!测试的时候进行监控! (压测观察)</p></li><li><p>jmap - histo 4655 | head -20，查找有多少对象产生</p></li><li><p>jmap -dump:format=b,file=xxx pid :<br>线上系统，内存特别大, jmap执行期间会对进程产生很大影响，甚至卡顿(电商不适合)<br>1：设定了参数HeapDump, 00M的时候会自动产生堆转储文件（不是很专业，因为多有监控，内存增长就会报警）<br>2：<font color='red'>很多服务器备份(高可用)，停掉这台服务器对其他服务器不影响</font><br>3：在线定位(一般小点儿公司用不到)</p><p>4：在测试环境中压测(产生类似内存增长问题，在堆还不是很大的时候进行转储)</p></li><li><p>java -Xms20M -Xmx20M -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError FullGC_Problem01</p></li><li><p>使用MAT / jhat /jvisualvm 进行dump文件分析<br><a href="https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html" target="_blank" rel="noopener">https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html</a><br>jhat -J-mx512M xxx.dump<br><a href="http://192.168.17.11:7000" target="_blank" rel="noopener">http://192.168.17.11:7000</a><br>拉到最后:找到对应链接<br>可以使用OQL查找特定问题对象</p></li><li><p>找到代码的问题</p></li></ol><h2 id="arthas在线排查工具"><a href="#arthas在线排查工具" class="headerlink" title="arthas在线排查工具"></a>arthas在线排查工具</h2><ul><li><p>为什么需要在线排查?</p><p>在生产上我们经常会碰到一些不好排查的问题，例如线程安全问题，用最简单的threaddump或者heapdump<br>不好查到问题原因。为了排查这些问题，有时我们会临时加一-些日志， 比如在一些关键的函数里打印出入参,<br>然后重新打包发布，如果打了日志还是没找到问题，继续加日志,重新打包发布。对于上线流程复杂而且审核<br>比较严的公司，从改代码到上线需要层层的流转，会大大影响问题排查的进度。</p></li><li><p>jvm观察jvm信息</p></li><li><p>thread定位线程问题</p></li><li><p>dashboard 观察系统情况</p></li><li><p>heapdump + jhat分析</p></li><li><p>jad反编译</p><p>动态代理生成类的问题定位</p><p>第三方的类(观察代码)</p><p>版本问题(确定自己最新提交的版本是不是被使用)</p></li><li><p>redefine 热替换</p><p>前有些限制条件:只能改方法实现(方法已经运行完成)，不能改方法名，不能改属性</p><p>m() -&gt; mm()</p></li><li><p>sc-search class</p></li><li><p>watch - watch method</p></li><li><p>没有包含的功能: jmap</p></li></ul><h1 id="案例汇总"><a href="#案例汇总" class="headerlink" title="案例汇总"></a>案例汇总</h1><p>00M产生的原因多种多样，有些程序未必产生00M,不断FGC(CPU飙高，但内存回收特别少) (上面案例)</p><ol><li><p>硬件升级系统反而卡顿的问题(见上)</p></li><li><p>线程池不当运用产生00M问题(见上)</p><p>不断的往List里加对象(实在太LOW)</p></li><li><p>smile jira问题<br>实际系统不断重启<br>解决问题 加内存 + 更换垃圾回收器G1<br>真正问题在哪儿?不知道</p></li><li><p>tomcat http-header-size过大问题(Hector)</p></li><li><p>lambda表达式导致方法区溢出问题(MethodArea / Perm Metaspace)<br>LambdaGC.java -XX:MaxMetaspaceSize=9M -XX:+PrintGCDetails</p></li><li><p>直接内存溢出问题(少见)</p><p>《深入理解]ava虚拟机》P59,使用Unsafe分配直接内存,或者使用NIO的问题</p></li><li><p>栈溢出问题</p><p>-Xss设定太小</p></li><li><p>比较一下这两段程序的异同， 分析哪-个是更优的写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Object o= nu11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; <span class="number">1</span>++) &#123;</span><br><span class="line">o = <span class="keyword">new</span> object();</span><br><span class="line"><span class="comment">//业务处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">Object o = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><p>重写finalize引发频繁GC</p><p>小米云，HBase同步系统，系统通过nginx访问超时报警，最后排查, C++程序员重写finalize引发频繁GC问题</p><p>为什么C++程序员会重写finalize? (new delete)</p><p>finalize耗时比较长(200ms)</p></li><li><p>如果有一个系统，内存一直消耗不超过10%，但是观察GC日志，发现FGC总是频繁产生，会是什么引起的?</p><p>System.gc() (这个比较Low)</p></li><li><p>Distuptor有个可以设置链的长度,如果过大,然后对象大，消费完不主动释放，会溢出(来自死物风情)</p></li><li><p>用jvm都会溢出，mycat用崩过，1.6.5某 个临时版本解析sq|子查询算法有问题，9个exists的联合sq|就导致生成几百万的对象(来自死物风情)</p></li><li><p>new大量线程，会产生native thread 00M， (low) 应该用线程池，<br>解决方案:减少堆空间(太TMlow了) ,预留更多内存产生native thread<br>JVM内存占物理内存比例50% - 80%</p></li></ol><h1 id="GC常用参数"><a href="#GC常用参数" class="headerlink" title="GC常用参数"></a>GC常用参数</h1><ul><li><p>-Xmn -Xms -Xmx -Xss</p><p>年轻代最小堆最大堆栈空间</p></li><li><p>-XX:+UseTLAB</p><p>使用TLAB,默认打开</p></li><li><p>-XX:+PrintTLAB</p><p>打印TL AB的使用情况</p></li><li><p>-XX:TL ABSize</p><p>设置TLAB大小.</p></li><li><p>-XX:+ DisableExplictGC</p><p>System.gc()不管用，FGC</p></li><li><p>-XX:+PrintGC</p></li><li><p>-XX:+PrintGCDetails</p></li><li><p>-XX:+ PrintHeapAtGC</p></li><li><p>-XX:+PrntGCTimeStamps</p></li><li><p>-XX:+PrintGCApplicationConcurrentTime (低)</p><p>打印应用程序时间</p></li><li><p>-XX:+PrintGCApplicationStoppedTime (低)</p><p>打印暂停时长</p></li><li><p>-XX:+PrintReferenceGC (重要性低)</p><p>记录回收了多少种不同引用类型的引用</p></li><li><p>-verbose:class</p><p>类加载详细过程</p></li><li><p>-XX:+PrintVMOptions</p></li><li><p>-XX:+PrintFlagsFinal -XX:+PrintFlagsInitial</p><p>必须会用</p></li><li><p>-Xloggc:opt/log/gc.log</p></li><li><p>-XX:MaxTenuringThreshold</p><p>升代年龄，最大值15</p></li><li><p>锁自旋次数-XX:PreBlockSpin 热点代码检测参数-XX:CompileThreshold逃逸分析标量替换…</p><p>这些不建议设置</p></li></ul><h1 id="Parallel常用参数"><a href="#Parallel常用参数" class="headerlink" title="Parallel常用参数"></a>Parallel常用参数</h1><ul><li><p>-XX:SurvivorRatio</p></li><li><p>-XX:PreTenureSizeThreshold</p><p>大对象到底多大</p></li><li><p>-XX:MaxTenuringThreshold</p></li><li><p>-Xx:+ParallelGCThreads</p><p>并行收集器的线程数，同样适用于CMS,一般设为和CPU核数相同</p></li><li><p>-XX:+UseAdaptiveSizePolicy</p><p>自动选择各区大小比例</p></li></ul><h1 id="CMS常用参数"><a href="#CMS常用参数" class="headerlink" title="CMS常用参数"></a>CMS常用参数</h1><ul><li><p>-XX:+UseConcMarkSweepGC</p></li><li><p>-XX:ParallelCMSThreads</p><p>CMS线程数量</p></li><li><p>-XX:CMSInitiatingOccupancyFraction</p><p>使用多少比例的老年代后开始CMS收集，默认是68%(近似值)， 如果频繁发生SerialOld卡顿,应该调小，(频繁CMS回收)</p></li><li><p>-XX:+UseCMSCompactAtFullCollection</p><p>在FGC时进行压缩</p></li><li><p>-XX:CMSFulIGC sBeforeCompaction</p><p>多少次FGC之后进行压缩</p></li><li><p>-XX:+CMSClassUnloadingEnabled</p></li><li><p>-XX:CMSInitiatingPermOccupancyFraction</p><p>达到什么比例时进行Perm回收</p></li><li><p>GCTimeRatio</p><p>设置GC时间占用程序运行时间的百分比</p></li><li><p>-XX:MaxGCPauseMillis</p><p>停顿时间，是-一个建议时间，GC会尝试用各种手段达到这个时间，比如减小年轻代</p></li></ul><h1 id="G1常用参数"><a href="#G1常用参数" class="headerlink" title="G1常用参数"></a>G1常用参数</h1><ul><li><p>-XX:+UseG1GC</p></li><li><p>-XX:MaxGCPauseMillis</p><p>建议值，G1会尝试调整Young区的块数来达到这个值</p></li><li><p>-XX:GCPauseIntervalMillis</p><p>? GC的间隔时间</p></li><li><p>-XX:+G1 HeapRegionSize</p><p>分区大小，建议逐渐增大该值，1 248 1632.</p><p>随着size增加，垃圾的存活时间更长，GC间隔更长,但每次GC的时间也会更长</p><p>ZGC做了改进(动态区块大小)</p></li><li><p>G1NewSizePercent</p><p>新生代最小比例，默认为5%</p></li><li><p>G1MaxNewSizePercent</p><p>新生代最大比例，默认为60%</p></li><li><p>GCTimeRatio</p><p>GC时间建议比例，G1 会根据这个值调整堆空间</p></li><li><p>ConcGCThreads</p><p>线程数量</p></li><li><p>InitiatingHeapOccupancyPercent</p><p>启动G1的堆空间占用比例</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;h2 id=&quot;大厂真题：2019年遇到的关于JVM-GC的问题&quot;&gt;&lt;a href=&quot;#大厂真题：2019年遇到的关于JVM-GC的问题&quot;
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="https://1194570458.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Docker-compose安装WordPress个人博客</title>
    <link href="https://1194570458.github.io/2020/04/20/Docker-compose%E5%AE%89%E8%A3%85WordPress%E5%8D%9A%E5%AE%A2/"/>
    <id>https://1194570458.github.io/2020/04/20/Docker-compose%E5%AE%89%E8%A3%85WordPress%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-04-20T01:36:02.000Z</published>
    <updated>2020-04-20T01:55:09.995Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建-docker-compose-yml-文件"><a href="#创建-docker-compose-yml-文件" class="headerlink" title="创建 docker-compose.yml 文件"></a>创建 docker-compose.yml 文件</h3><p>创建 <code>docker-compose.yml</code>文件来分别启动你的 <code>WordPress</code>个人博客和挂载了持久卷的 <code>MySQL</code>实例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   <span class="attr">db:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span> <span class="comment"># 环境参数</span></span><br><span class="line">       <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span> <span class="comment"># 设置 root 用户的密码</span></span><br><span class="line">       <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span> <span class="comment"># 创建 wordpress的数据库</span></span><br><span class="line">       <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span> <span class="comment"># 创建 wordpress用户</span></span><br><span class="line">       <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span> <span class="comment"># wordpress用户的密码</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">wordpress:</span></span><br><span class="line">     <span class="attr">depends_on:</span> <span class="comment"># 依赖db服务，需要等db服务运行后才运行wordpress服务</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">"8000:80"</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span> <span class="comment"># 同一个 compose文件内，服务之间可以通过服务名互相通讯</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_NAME:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">db_data:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>WordPress 所做的任何更新保存到数据库中，并持久化到数据卷<code>db_data</code>中，下次以后避免数据丢失</li><li>WordPress 需要占用<code>80</code>和<code>443</code>端口</li></ul><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行命令</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">Creating network "my_wordpress_default" with the default driver</span><br><span class="line">Pulling db (mysql:5.7)...</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">efd26ecc9548: Pull complete</span><br><span class="line">a3ed95caeb02: Pull complete</span><br><span class="line">...</span><br><span class="line">Digest: sha256:34a0aca88e85f2efa5edff1cea77cf5d3147ad93545dbec99cfe705b03c520de</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">Pulling wordpress (wordpress:latest)...</span><br><span class="line">latest: Pulling from library/wordpress</span><br><span class="line">efd26ecc9548: Already exists</span><br><span class="line">a3ed95caeb02: Pull complete</span><br><span class="line">589a9d9a7c64: Pull complete</span><br><span class="line">...</span><br><span class="line">Digest: sha256:ed28506ae44d5def89075fd5c01456610cd6c64006addfe5210b8c675881aff6</span><br><span class="line">Status: Downloaded newer image for wordpress:latest</span><br><span class="line">Creating my_wordpress_db_1</span><br><span class="line">Creating my_wordpress_wordpress_1</span><br></pre></td></tr></table></figure><h3 id="在你的浏览器中访问-WordPress"><a href="#在你的浏览器中访问-WordPress" class="headerlink" title="在你的浏览器中访问 WordPress"></a>在你的浏览器中访问 WordPress</h3><ul><li>WordPress 在宿主机的<code>8000</code>端口上运行</li><li>第一次运行需要稍等几分钟</li></ul><p>在你的浏览器上输入 http://宿主机IP://8000 即可访问 WordPress</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建-docker-compose-yml-文件&quot;&gt;&lt;a href=&quot;#创建-docker-compose-yml-文件&quot; class=&quot;headerlink&quot; title=&quot;创建 docker-compose.yml 文件&quot;&gt;&lt;/a&gt;创建 docker-comp
      
    
    </summary>
    
    
    
      <category term="Docker-compose" scheme="https://1194570458.github.io/tags/Docker-compose/"/>
    
      <category term="WordPress" scheme="https://1194570458.github.io/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>Docker-compose尝新tomcat</title>
    <link href="https://1194570458.github.io/2020/04/20/Docker-compose%E5%B0%9D%E6%96%B0tomcat/"/>
    <id>https://1194570458.github.io/2020/04/20/Docker-compose%E5%B0%9D%E6%96%B0tomcat/</id>
    <published>2020-04-20T01:27:01.000Z</published>
    <updated>2020-04-20T01:37:44.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建-docker-compose-yml-文件"><a href="#新建-docker-compose-yml-文件" class="headerlink" title="新建 docker-compose.yml 文件"></a>新建 docker-compose.yml 文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span> <span class="comment"># compose 文件版本</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 服务</span></span><br><span class="line">  <span class="attr">tomcat:</span> <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 总是开机启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat</span> <span class="comment"># 镜像名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat</span> <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment">#暴露的端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 映射目录，宿主机目录:容器目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/usr/local/tomcat/webapps/ROOT</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment"># 环境参数</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><h2 id="运行-docker-compose"><a href="#运行-docker-compose" class="headerlink" title="运行 docker-compose"></a>运行 docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up # 直接运行</span><br><span class="line"></span><br><span class="line">docker-compose up -d # 后台运行</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新建-docker-compose-yml-文件&quot;&gt;&lt;a href=&quot;#新建-docker-compose-yml-文件&quot; class=&quot;headerlink&quot; title=&quot;新建 docker-compose.yml 文件&quot;&gt;&lt;/a&gt;新建 docker-comp
      
    
    </summary>
    
    
    
      <category term="Docker-compose" scheme="https://1194570458.github.io/tags/Docker-compose/"/>
    
      <category term="Tomcat" scheme="https://1194570458.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>在Linux上安装Docker-compose</title>
    <link href="https://1194570458.github.io/2020/04/20/%E5%9C%A8Linux%E4%B8%8A%E5%AE%89%E8%A3%85Docker-compose/"/>
    <id>https://1194570458.github.io/2020/04/20/%E5%9C%A8Linux%E4%B8%8A%E5%AE%89%E8%A3%85Docker-compose/</id>
    <published>2020-04-20T01:17:48.000Z</published>
    <updated>2020-04-20T03:22:51.913Z</updated>
    
    <content type="html"><![CDATA[<p>Docker-compose的Github</p><blockquote><p><a href="https://github.com/docker/compose" target="_blank" rel="noopener">https://github.com/docker/compose</a></p></blockquote><p>Docker-compose的安装文档</p><blockquote><p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">https://docs.docker.com/compose/install/</a></p></blockquote><h3 id="安装-Docker-compose"><a href="#安装-Docker-compose" class="headerlink" title="安装 Docker-compose"></a>安装 Docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行以下命令下载docker-compose</span></span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置运行权限</span></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">docker-compose version 1.25.5, build 1110ad01</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker-compose的Github&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/docker/compose&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/d
      
    
    </summary>
    
    
    
      <category term="Docker-compose" scheme="https://1194570458.github.io/tags/Docker-compose/"/>
    
      <category term="Docker" scheme="https://1194570458.github.io/tags/Docker/"/>
    
      <category term="Linux" scheme="https://1194570458.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>在Linux上安装Docker</title>
    <link href="https://1194570458.github.io/2020/04/20/%E5%9C%A8Linux%E4%B8%8A%E5%AE%89%E8%A3%85Docker/"/>
    <id>https://1194570458.github.io/2020/04/20/%E5%9C%A8Linux%E4%B8%8A%E5%AE%89%E8%A3%85Docker/</id>
    <published>2020-04-20T01:06:41.000Z</published>
    <updated>2020-04-20T01:14:43.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu安装docker"><a href="#Ubuntu安装docker" class="headerlink" title="Ubuntu安装docker"></a>Ubuntu安装docker</h2><h3 id="安装系统工具"><a href="#安装系统工具" class="headerlink" title="安装系统工具"></a>安装系统工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><h3 id="安装GPG证书"><a href="#安装GPG证书" class="headerlink" title="安装GPG证书"></a>安装GPG证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="写入软件源信息"><a href="#写入软件源信息" class="headerlink" title="写入软件源信息"></a>写入软件源信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure><h3 id="更新软件源并安装docker"><a href="#更新软件源并安装docker" class="headerlink" title="更新软件源并安装docker"></a>更新软件源并安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><h2 id="Centos安装docker"><a href="#Centos安装docker" class="headerlink" title="Centos安装docker"></a>Centos安装docker</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2</span><br></pre></td></tr></table></figure><h3 id="添加软件源"><a href="#添加软件源" class="headerlink" title="添加软件源"></a>添加软件源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo yum-config-manager \</span></span><br><span class="line"><span class="comment">#     --add-repo \</span></span><br><span class="line"><span class="comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><h3 id="配置安装最新docker"><a href="#配置安装最新docker" class="headerlink" title="配置安装最新docker"></a>配置安装最新docker</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-edge</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure><h2 id="自动脚本安装"><a href="#自动脚本安装" class="headerlink" title="自动脚本安装"></a>自动脚本安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>/etc/docker/daemon.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span>,</span><br><span class="line">    <span class="string">"https://3jc0zfhj.mirror.aliyuncs.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [ # 私有仓库地址</span><br><span class="line">     <span class="string">"10.4.7.50"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ubuntu安装docker&quot;&gt;&lt;a href=&quot;#Ubuntu安装docker&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu安装docker&quot;&gt;&lt;/a&gt;Ubuntu安装docker&lt;/h2&gt;&lt;h3 id=&quot;安装系统工具&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://1194570458.github.io/tags/Docker/"/>
    
      <category term="Linux" scheme="https://1194570458.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>记录安装Docker</title>
    <link href="https://1194570458.github.io/2020/04/20/%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85Docker/"/>
    <id>https://1194570458.github.io/2020/04/20/%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85Docker/</id>
    <published>2020-04-19T16:03:19.000Z</published>
    <updated>2020-04-19T16:06:52.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Ubuntu安装docker"><a href="#Ubuntu安装docker" class="headerlink" title="Ubuntu安装docker"></a>Ubuntu安装docker</h2><h3 id="安装系统工具"><a href="#安装系统工具" class="headerlink" title="安装系统工具"></a>安装系统工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><h3 id="安装GPG证书"><a href="#安装GPG证书" class="headerlink" title="安装GPG证书"></a>安装GPG证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="写入软件源信息"><a href="#写入软件源信息" class="headerlink" title="写入软件源信息"></a>写入软件源信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure><h3 id="更新软件源并安装docker"><a href="#更新软件源并安装docker" class="headerlink" title="更新软件源并安装docker"></a>更新软件源并安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><h2 id="Centos安装docker"><a href="#Centos安装docker" class="headerlink" title="Centos安装docker"></a>Centos安装docker</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2</span><br></pre></td></tr></table></figure><h3 id="添加软件源"><a href="#添加软件源" class="headerlink" title="添加软件源"></a>添加软件源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo yum-config-manager \</span></span><br><span class="line"><span class="comment">#     --add-repo \</span></span><br><span class="line"><span class="comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><h3 id="配置安装最新docker"><a href="#配置安装最新docker" class="headerlink" title="配置安装最新docker"></a>配置安装最新docker</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-edge</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure><h2 id="自动脚本安装"><a href="#自动脚本安装" class="headerlink" title="自动脚本安装"></a>自动脚本安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>/etc/docker/daemon.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span>,</span><br><span class="line">    <span class="string">"https://3jc0zfhj.mirror.aliyuncs.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [ # 私有仓库地址</span><br><span class="line">     <span class="string">"10.4.7.50"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h1><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="docker-compose实战tomcat"><a href="#docker-compose实战tomcat" class="headerlink" title="docker-compose实战tomcat"></a>docker-compose实战tomcat</h2><p>新建/usr/local/docker/tomcat目录</p><p>新建docker-compose.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/tomcat/webapps/test:/usr/local/tomcat/webapps/test</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><h2 id="docker-compose实战mysql"><a href="#docker-compose实战mysql" class="headerlink" title="docker-compose实战mysql"></a>docker-compose实战mysql</h2><p>新建/usr/local/docker/mysql目录</p><p>新建docker-compose.yml文件</p><h3 id="mysql5-7-22"><a href="#mysql5-7-22" class="headerlink" title="mysql5.7.22"></a>mysql5.7.22</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.22</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_general_ci</span></span><br><span class="line">      <span class="string">--explicit_defaults_for_timestamp=true</span></span><br><span class="line">      <span class="string">--lower_case_table_names=1</span></span><br><span class="line">      <span class="string">--max_allowed_packet=128M</span></span><br><span class="line">      <span class="string">--sql-mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql-data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql-data:</span></span><br></pre></td></tr></table></figure><h3 id="mysql8"><a href="#mysql8" class="headerlink" title="mysql8"></a>mysql8</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_general_ci</span></span><br><span class="line">      <span class="string">--explicit_defaults_for_timestamp=true</span></span><br><span class="line">      <span class="string">--lower_case_table_names=1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><h1 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h1><h2 id="安装gitlab"><a href="#安装gitlab" class="headerlink" title="安装gitlab"></a>安装gitlab</h2><blockquote><p>docker-compose.yml ,如下:</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'twang2218/gitlab-ce-zh'</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">'10.4.7.50'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">external_url</span> <span class="string">'http://10.4.7.50'</span></span><br><span class="line">        <span class="string">gitlab_rails['gitlab_shell_ssh_port']</span> <span class="string">=</span> <span class="number">2222</span></span><br><span class="line">        <span class="string">unicorn['port']</span> <span class="string">=</span> <span class="number">8888</span></span><br><span class="line">        <span class="string">nginx['listen_port']</span> <span class="string">=</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'443:443'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'2222:22'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/etc/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/opt/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://ip:80" target="_blank" rel="noopener">http://ip:80</a></p><h2 id="GitLab基本配置"><a href="#GitLab基本配置" class="headerlink" title="GitLab基本配置"></a>GitLab基本配置</h2><h3 id="账户与限制设置"><a href="#账户与限制设置" class="headerlink" title="账户与限制设置"></a>账户与限制设置</h3><p>关闭 Gravatar头像</p><h3 id="注册限制"><a href="#注册限制" class="headerlink" title="注册限制"></a>注册限制</h3><p>开启注册</p><h2 id="免密登陆"><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h2><h3 id="生成SSH-KEY"><a href="#生成SSH-KEY" class="headerlink" title="生成SSH KEY"></a>生成SSH KEY</h3><p>使用ssh-keygen工具生成，位置在git安装目录下，C:\Program Files\Git\usr\bin</p><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><h3 id="添加ssh-key"><a href="#添加ssh-key" class="headerlink" title="添加ssh key"></a>添加ssh key</h3><p>gitlab-&gt;用户-&gt;设置-&gt;SSH密钥</p><p>标题：电脑标记</p><h2 id="TortoiseGit修改ssh设置"><a href="#TortoiseGit修改ssh设置" class="headerlink" title="TortoiseGit修改ssh设置"></a>TortoiseGit修改ssh设置</h2><p>设置-&gt;网络-&gt;ssh客户端 修改为 git安装目录-&gt;usr-&gt;bin-&gt;ssh</p><h1 id="Nexus-（依赖管理平台）"><a href="#Nexus-（依赖管理平台）" class="headerlink" title="Nexus （依赖管理平台）"></a>Nexus （依赖管理平台）</h1><h2 id="安装nexus"><a href="#安装nexus" class="headerlink" title="安装nexus"></a>安装nexus</h2><p>新建/usr/local/docker/nexus目录</p><p>新建docker-compose.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8082</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nexus-data:/nexus-data</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">nexus-data:</span></span><br></pre></td></tr></table></figure><h2 id="登陆控制台"><a href="#登陆控制台" class="headerlink" title="登陆控制台"></a>登陆控制台</h2><p>地址: <a href="http://ip:port">http://ip:port</a></p><p>用户名: admin</p><p>密码: admin123</p><h2 id="修改maven仓库为私服"><a href="#修改maven仓库为私服" class="headerlink" title="修改maven仓库为私服"></a>修改maven仓库为私服</h2><p>在 Maven <code>settings.xml</code> 中添加 Nexus 认证信息(<code>servers</code> 节点下)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置自动化部署"><a href="#配置自动化部署" class="headerlink" title="配置自动化部署"></a>配置自动化部署</h2><p>在 <code>pom.xml</code> 中添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8082/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8082/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>ID 名称必须要与 <code>settings.xml</code> 中 Servers 配置的 ID 名称保持一致。</li><li>项目版本号中有 <code>SNAPSHOT</code> 标识的，会发布到 Nexus Snapshots Repository, 否则发布到 Nexus Release Repository，并根据 ID 去匹配授权账号。</li></ul><h2 id="部署到仓库"><a href="#部署到仓库" class="headerlink" title="部署到仓库"></a>部署到仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><h2 id="上传第三方-JAR-包"><a href="#上传第三方-JAR-包" class="headerlink" title="上传第三方 JAR 包"></a>上传第三方 JAR 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如第三方JAR包：aliyun-sdk-oss-2.2.3.jar</span></span><br><span class="line">mvn deploy:deploy-file </span><br><span class="line">  -DgroupId=com.aliyun.oss </span><br><span class="line">  -DartifactId=aliyun-sdk-oss </span><br><span class="line">  -Dversion=2.2.3 </span><br><span class="line">  -Dpackaging=jar </span><br><span class="line">  -Dfile=D:\aliyun-sdk-oss-2.2.3.jar </span><br><span class="line">  -Durl=http://127.0.0.1:8081/repository/maven-3rd/ </span><br><span class="line">  -DrepositoryId=nexus-releases</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>建议在上传第三方 JAR 包时，创建单独的第三方 JAR 包管理仓库，便于管理有维护。（maven-3rd）</li><li><code>-DrepositoryId=nexus-releases</code> 对应的是 <code>settings.xml</code> 中 Servers 配置的 ID 名称。（授权）</li></ul><h2 id="配置代理仓库"><a href="#配置代理仓库" class="headerlink" title="配置代理仓库"></a>配置代理仓库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Plugin Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="安装Docker-Registry私服"><a href="#安装Docker-Registry私服" class="headerlink" title="安装Docker Registry私服"></a>安装Docker Registry私服</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>新建/usr/local/docker/registry目录</p><p>新建docker-compose.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5000</span><span class="string">:5000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/registry</span></span><br></pre></td></tr></table></figure><p>地址 <a href="http://ip:5000/v2/" target="_blank" rel="noopener">http://ip:5000/v2/</a></p><h2 id="配置私服客户端"><a href="#配置私服客户端" class="headerlink" title="配置私服客户端"></a>配置私服客户端</h2><p>编辑/etc/docker/daemon.json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">    <span class="string">"ip:5000"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="检查客户端配置是否生效"><a href="#检查客户端配置是否生效" class="headerlink" title="检查客户端配置是否生效"></a>检查客户端配置是否生效</h3><p>使用 <code>docker info</code> 命令手动检查，如果从配置中看到如下内容，说明配置成功（192.168.75.133 为教学案例 IP）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Insecure Registries:</span><br><span class="line"> 192.168.75.133:5000</span><br><span class="line"> 127.0.0.0/8</span><br></pre></td></tr></table></figure><h3 id="测试镜像上传"><a href="#测试镜像上传" class="headerlink" title="测试镜像上传"></a>测试镜像上传</h3><p>我们以 Nginx 为例测试镜像上传功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 拉取一个镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看全部镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment">## 标记本地镜像并指向目标仓库（ip:port/image_name:tag，该格式为标记版本号）</span></span><br><span class="line">docker tag nginx 192.168.75.133:5000/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">## 提交镜像到仓库</span></span><br><span class="line">docker push 192.168.75.133:5000/nginx</span><br></pre></td></tr></table></figure><h3 id="查看全部镜像"><a href="#查看全部镜像" class="headerlink" title="查看全部镜像"></a>查看全部镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET http://192.168.75.133:5000/v2/_catalog</span><br></pre></td></tr></table></figure><h3 id="查看指定镜像"><a href="#查看指定镜像" class="headerlink" title="查看指定镜像"></a>查看指定镜像</h3><p>以 Nginx 为例，查看已提交的列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET http://192.168.75.133:5000/v2/nginx/tags/list</span><br></pre></td></tr></table></figure><h3 id="测试拉取镜像"><a href="#测试拉取镜像" class="headerlink" title="测试拉取镜像"></a>测试拉取镜像</h3><ul><li>先删除镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi nginx</span><br><span class="line">docker rmi 192.168.75.133:5000/nginx</span><br></pre></td></tr></table></figure><ul><li>再拉取镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.75.133:5000/nginx</span><br></pre></td></tr></table></figure><h2 id="部署Docker-Registry-WebUI"><a href="#部署Docker-Registry-WebUI" class="headerlink" title="部署Docker Registry WebUI"></a>部署Docker Registry WebUI</h2><p>私服安装成功后就可以使用 docker 命令行工具对 registry 做各种操作了。然而不太方便的地方是不能直观的查看 registry 中的资源情况。如果可以使用 UI 工具管理镜像就更好了。这里介绍两个 Docker Registry WebUI 工具</p><ul><li><a href="https://github.com/kwk/docker-registry-frontend" target="_blank" rel="noopener">docker-registry-frontend</a></li><li><a href="https://hub.docker.com/r/hyper/docker-registry-web/" target="_blank" rel="noopener">docker-registry-web</a></li></ul><p>两个工具的功能和界面都差不多，我们以 <code>docker-registry-fontend</code> 为例讲解</p><h3 id="docker-registry-frontend"><a href="#docker-registry-frontend" class="headerlink" title="docker-registry-frontend"></a>docker-registry-frontend</h3><p>新建/usr/local/docker/webui目录</p><p>新建docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3.1'</span></span><br><span class="line">services:</span><br><span class="line">  frontend:</span><br><span class="line">    image: konradkleine/docker-registry-frontend:v2</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line">    volumes:</span><br><span class="line">      - ./certs/frontend.crt:/etc/apache2/server.crt:ro</span><br><span class="line">      - ./certs/frontend.key:/etc/apache2/server.key:ro</span><br><span class="line">    environment:</span><br><span class="line">      - ENV_DOCKER_REGISTRY_HOST=192.168.75.133</span><br><span class="line">      - ENV_DOCKER_REGISTRY_PORT=5000</span><br></pre></td></tr></table></figure><p>地址：<a href="http://ip:8080" target="_blank" rel="noopener">http://ip:8080</a></p><h1 id="安装Harbor私有仓库"><a href="#安装Harbor私有仓库" class="headerlink" title="安装Harbor私有仓库"></a>安装Harbor私有仓库</h1><p>GitHub地址：<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a></p><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -des3 -out server.key 2048</span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line">cp server.key server.key.org</span><br><span class="line">openssl rsa -<span class="keyword">in</span> server.key.org -out server.key</span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br><span class="line">mkdir /data/cert -p</span><br><span class="line">mv server.* /data/cert</span><br><span class="line">chmod -R 777 /data/cert</span><br></pre></td></tr></table></figure><h2 id="修改harbor-cfg"><a href="#修改harbor-cfg" class="headerlink" title="修改harbor.cfg"></a>修改harbor.cfg</h2><ol><li>hostname=域名</li><li>ui_url_protocol = https</li><li>db_password = 数据库密码</li><li>harbor_admin_password = 123456</li></ol><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p> hostname:80  账号：admin 密码：123456</p><h2 id="登录到私有仓库"><a href="#登录到私有仓库" class="headerlink" title="登录到私有仓库"></a>登录到私有仓库</h2><p>docker login hostname</p><h1 id="Docker-安装WordPress个人博客"><a href="#Docker-安装WordPress个人博客" class="headerlink" title="Docker 安装WordPress个人博客"></a>Docker 安装WordPress个人博客</h1><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ol><li>PHP 5.6 或更新软件</li><li>MySQL 5.6或 更新版本</li><li>Apache 和 mod_rewrite 模块</li></ol><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><h3 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name db -e MYSQL_ROOT_PASSWORD=example -d mariadb</span><br><span class="line">docker run --name MyWordPress --link db:mysql -p 8080:80 -d workpress</span><br></pre></td></tr></table></figure><h3 id="使用Docker-compose安装"><a href="#使用Docker-compose安装" class="headerlink" title="使用Docker-compose安装"></a>使用Docker-compose安装</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">version</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">depends_on:</span> <span class="comment">#依赖db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br></pre></td></tr></table></figure><h1 id="Docker内存限制"><a href="#Docker内存限制" class="headerlink" title="Docker内存限制"></a>Docker内存限制</h1><table><thead><tr><th>–memory-swap</th><th>–memory</th><th>功能</th></tr></thead><tbody><tr><td>正数S</td><td>正数M</td><td>容器可用总空间为S，其中ram为M，swap为（S-M），若S=M，则无可用swap资源</td></tr><tr><td>0</td><td>正数M</td><td>相当于未设置swap（unset）</td></tr><tr><td>unset</td><td>正数M</td><td>若主机（Docker Host）启用了swap，则容器的可用swap为2*M</td></tr><tr><td>-1</td><td>正数M</td><td>若注意（Docker Host）启用了swap，则容器可使用最大至主机上的所有swap空间的swap资源</td></tr></tbody></table><h1 id="Docker-清除虚悬镜像"><a href="#Docker-清除虚悬镜像" class="headerlink" title="Docker 清除虚悬镜像"></a>Docker 清除虚悬镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -f "dangling=true" -q)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">docker image prune -a -f</span><br></pre></td></tr></table></figure><h1 id="Docker-Compose-网络设置"><a href="#Docker-Compose-网络设置" class="headerlink" title="Docker-Compose 网络设置"></a>Docker-Compose 网络设置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网络</span></span><br><span class="line">docker create network my_network</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看已存在的网络</span></span><br><span class="line">docke network list</span><br></pre></td></tr></table></figure><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">my_network</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;h2 id=&quot;Ubuntu安装docker&quot;&gt;&lt;a href=&quot;#Ubuntu安装docker&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://1194570458.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
