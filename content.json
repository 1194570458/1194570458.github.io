{"meta":{"title":"Kason的博客","subtitle":"个人博客","description":"记录享受技术的过程","author":"Kason Li","url":"https://kason.top","root":"/"},"pages":[{"title":"About me","date":"2020-04-20T01:08:52.000Z","updated":"2020-05-23T14:23:42.617Z","comments":true,"path":"about/me.html","permalink":"https://kason.top/about/me.html","excerpt":"","text":"关于我只是一个小小程序员"}],"posts":[{"title":"什么是redis","slug":"什么是redis","date":"2020-05-23T13:46:28.000Z","updated":"2020-05-23T14:23:42.617Z","comments":true,"path":"2020/05/23/什么是redis/","link":"","permalink":"https://kason.top/2020/05/23/%E4%BB%80%E4%B9%88%E6%98%AFredis/","excerpt":"","text":"什么是redis，有哪些特征基于内存（快） k，V （多数做缓存） 单线程（worker） ，iothreads 连接很多（连接池很多） ： nio多路复用（epoll） V：类型（5） 本地方法：计算向数据移动，IO优化 整体模型，串行化/原子操作： 并行 VS 串行谁更优 mamcachedk，v（string） 任何数据可以用json字符串存取，但数据传输一个整体，取某个值需要在本地计算 redis存： Ipush a “{a,b,c}”，识别数组 ，取 index(2)：具有本地方法，发指定下标取回指定的数据，计算在redis内 worker单线程 通过kernel :epoll 获取哪些数据可以读 （ io event） 主动去kernel获取客户端数据 （io读取，串行化） 6.x以后可以开启 iothreads （获取io数据时是多线程并行） 计算set get操作 （ 串行化） 使用场景Value: nosql String 字符串操作 数值计算 场景：session共享，kv缓存，计数器，fs文件系统（小文件，对磁盘io影响很大） （二进制）位运算 场景：bitmap 【任意统计】 统计一年用户登录天数（具体哪天），第五天 setbit 4 1 第365天 setbit 364 1 假如要派发礼品，统计活跃用户数 （数据过大做分桶）： setbit 20200101(日期) 8(id) 1(已登录) setbit 20200101(日期) 3(id) 1(已登录) setbit 20200102(日期) 8(id) 1(已登录) bitop or result 20200101 20200102；bitcount result（活跃用户数为 2） strlen 计算的是占用字节 具有二进制安全，byte[]类型 List value：双向链表；key：两个指针分别指向链表头尾（O(1)） 组合：同向 lpush lpop 栈；异向 lpush rpop 队列；lidex 数组；ltrim 优化redis 内存量 场景：评论列表；消息队列；替代 java 容器（map，list），让jvm无状态（挂了数据不丢失）、数据共享 hash hashtable 分治 场景：聚集数据（根据订单id查询 详情、评论、购买数 缓存起来）；表单详情页 set 集合：无序，不重复 场景： 集合交并差（交集：共同好友，差集：好友推荐）【不推荐：单线程，cpu密集型，阻塞其他操作，多实例：不同实例干不同的事】 随机事件（抽奖，验证码，扑克牌游戏）srandemember [count] 正数：返回不重复的集合，负数：返回可重复集合 sorted set（zset） 场景： 排行榜 评论：无序，分页 持久化redis 持久化 问题-&gt;分布式 cap/paxos/raft/akf RDB、image、bak 拍快照（时间点） 全量，丢失量比较大；体积相近内存大小；恢复速度取决于磁盘io速度-&gt;快 AOF 日志 趋向于实时；会丢数据 sync 性能下降 os：pagecache 丢失 5秒/ 10%内存（30%内存 阻塞） 每秒 AOF如果手动开启aof，在4.x以前，只会读取aof内容，不会读rdb 如果redis运行了10年，内存4g，AOF文件大小可以达到1T，因为他是追加命令。解决办法：重写（rewrite）：失效、无用、重复，条件满足后触发（4.x以前）。4.x以后：拍一个快照，然后在后面继续追加指令，RDB+AOF 解决问题辩证（快，内存）-&gt;当缓存：不建议开持久化-&gt;重启丢失数据-&gt;最快的缓存方案：1.RDB+AOF 2.主从复制 ​ -&gt;当数据库DB：AOFsync、主从强一致性-&gt;性能降低接近mysql 单点故障（不可用） 全量（主从复制）【高可用】 主备 压力/性能 扩容（分片），不是全量数据，全量主从复制 同步数据 强一致性：主从复制，会造成不可用性（CAP定理） 弱一致性：redis默认 最终一致性：主-&gt;黑盒（不会挂，强一致性）-&gt;从 开启强一致性，开启AOF、RDB，性能大降 最终一致性3台主机中至少两两通讯，如果断掉一台，添加数据可以成功，断掉的那台就不能对外提供服务，保证了数据强一致性。弱断掉的那台重新加入集群中，必须同步数据，后再对外提供服务 分布式锁redis、zookeeper、etcd 不靠谱，金融类 no；互联网类 yes","categories":[],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://kason.top/tags/Redis/"}]},{"title":"JVM调优实战","slug":"JVM调优实战","date":"2020-05-23T13:45:22.000Z","updated":"2020-05-23T14:23:42.617Z","comments":true,"path":"2020/05/23/JVM调优实战/","link":"","permalink":"https://kason.top/2020/05/23/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Docker-compose安装WordPress个人博客","slug":"Docker-compose安装WordPress博客","date":"2020-04-20T01:36:02.000Z","updated":"2020-05-23T14:23:42.617Z","comments":true,"path":"2020/04/20/Docker-compose安装WordPress博客/","link":"","permalink":"https://kason.top/2020/04/20/Docker-compose%E5%AE%89%E8%A3%85WordPress%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"创建 docker-compose.yml 文件创建 docker-compose.yml文件来分别启动你的 WordPress个人博客和挂载了持久卷的 MySQL实例 12345678910111213141516171819202122232425262728version: '3.3'services: db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql restart: always environment: # 环境参数 MYSQL_ROOT_PASSWORD: somewordpress # 设置 root 用户的密码 MYSQL_DATABASE: wordpress # 创建 wordpress的数据库 MYSQL_USER: wordpress # 创建 wordpress用户 MYSQL_PASSWORD: wordpress # wordpress用户的密码 wordpress: depends_on: # 依赖db服务，需要等db服务运行后才运行wordpress服务 - db image: wordpress:latest ports: - \"8000:80\" restart: always environment: WORDPRESS_DB_HOST: db:3306 # 同一个 compose文件内，服务之间可以通过服务名互相通讯 WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpressvolumes: db_data: &#123;&#125; WordPress 所做的任何更新保存到数据库中，并持久化到数据卷db_data中，下次以后避免数据丢失 WordPress 需要占用80和443端口 运行项目123456789101112131415161718192021# 执行命令docker-compose up -d# 输出Creating network \"my_wordpress_default\" with the default driverPulling db (mysql:5.7)...5.7: Pulling from library/mysqlefd26ecc9548: Pull completea3ed95caeb02: Pull complete...Digest: sha256:34a0aca88e85f2efa5edff1cea77cf5d3147ad93545dbec99cfe705b03c520deStatus: Downloaded newer image for mysql:5.7Pulling wordpress (wordpress:latest)...latest: Pulling from library/wordpressefd26ecc9548: Already existsa3ed95caeb02: Pull complete589a9d9a7c64: Pull complete...Digest: sha256:ed28506ae44d5def89075fd5c01456610cd6c64006addfe5210b8c675881aff6Status: Downloaded newer image for wordpress:latestCreating my_wordpress_db_1Creating my_wordpress_wordpress_1 在你的浏览器中访问 WordPress WordPress 在宿主机的8000端口上运行 第一次运行需要稍等几分钟 在你的浏览器上输入 http://宿主机IP://8000 即可访问 WordPress","categories":[],"tags":[{"name":"Docker-compose","slug":"Docker-compose","permalink":"https://kason.top/tags/Docker-compose/"},{"name":"WordPress","slug":"WordPress","permalink":"https://kason.top/tags/WordPress/"}]},{"title":"Docker-compose尝新tomcat","slug":"Docker-compose尝新tomcat","date":"2020-04-20T01:27:01.000Z","updated":"2020-05-23T14:23:42.617Z","comments":true,"path":"2020/04/20/Docker-compose尝新tomcat/","link":"","permalink":"https://kason.top/2020/04/20/Docker-compose%E5%B0%9D%E6%96%B0tomcat/","excerpt":"","text":"新建 docker-compose.yml 文件123456789101112version: '3.1' # compose 文件版本services: # 服务 tomcat: # 服务名称 restart: always # 总是开机启动 image: tomcat # 镜像名称 container_name: tomcat # 容器名称 ports: #暴露的端口 - 8080:8080 volumes: # 映射目录，宿主机目录:容器目录 - ./data:/usr/local/tomcat/webapps/ROOT environment: # 环境参数 TZ: Asia/Shanghai 运行 docker-compose123docker-compose up # 直接运行docker-compose up -d # 后台运行","categories":[],"tags":[{"name":"Docker-compose","slug":"Docker-compose","permalink":"https://kason.top/tags/Docker-compose/"},{"name":"Tomcat","slug":"Tomcat","permalink":"https://kason.top/tags/Tomcat/"}]},{"title":"在Linux上安装Docker-compose","slug":"在Linux上安装Docker-compose","date":"2020-04-20T01:17:48.000Z","updated":"2020-05-23T14:23:42.617Z","comments":true,"path":"2020/04/20/在Linux上安装Docker-compose/","link":"","permalink":"https://kason.top/2020/04/20/%E5%9C%A8Linux%E4%B8%8A%E5%AE%89%E8%A3%85Docker-compose/","excerpt":"","text":"Docker-compose的Github https://github.com/docker/compose Docker-compose的安装文档 https://docs.docker.com/compose/install/ 安装 Docker-compose12345# 执行以下命令下载docker-composesudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose# 设置运行权限sudo chmod +x /usr/local/bin/docker-compose 测试是否安装成功1234docker-compose --version# 输出docker-compose version 1.25.5, build 1110ad01","categories":[],"tags":[{"name":"Docker-compose","slug":"Docker-compose","permalink":"https://kason.top/tags/Docker-compose/"},{"name":"Docker","slug":"Docker","permalink":"https://kason.top/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"https://kason.top/tags/Linux/"}]},{"title":"在Linux上安装Docker","slug":"在Linux上安装Docker","date":"2020-04-20T01:06:41.000Z","updated":"2020-05-23T14:23:42.617Z","comments":true,"path":"2020/04/20/在Linux上安装Docker/","link":"","permalink":"https://kason.top/2020/04/20/%E5%9C%A8Linux%E4%B8%8A%E5%AE%89%E8%A3%85Docker/","excerpt":"","text":"Ubuntu安装docker安装系统工具12sudo apt-get updatesudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common 安装GPG证书1curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - 写入软件源信息1sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\" 更新软件源并安装docker12sudo apt-get -y updatesudo apt-get -y install docker-ce Centos安装docker安装依赖123$ sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 添加软件源123456789$ sudo yum-config-manager \\ --add-repo \\ https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo# 官方源# $ sudo yum-config-manager \\# --add-repo \\# https://download.docker.com/linux/centos/docker-ce.repo 配置安装最新docker 1sudo yum-config-manager --enable docker-ce-edge 安装12$ sudo yum makecache fast$ sudo yum install docker-ce 自动脚本安装12$ curl -fsSL get.docker.com -o get-docker.sh$ sudo sh get-docker.sh --mirror Aliyun 镜像加速配置文件 /etc/docker/daemon.json 123456789&#123; \"registry-mirrors\": [ \"https://registry.docker-cn.com\", \"https://3jc0zfhj.mirror.aliyuncs.com\" ], \"insecure-registries\": [ # 私有仓库地址 \"10.4.7.50\" ]&#125; 重启docker12sudo systemctl daemon-reloadsudo systemctl restart docker","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://kason.top/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"https://kason.top/tags/Linux/"}]},{"title":"记录安装Docker","slug":"记录安装Docker","date":"2020-04-19T16:03:19.000Z","updated":"2020-05-23T14:23:42.617Z","comments":true,"path":"2020/04/19/记录安装Docker/","link":"","permalink":"https://kason.top/2020/04/19/%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85Docker/","excerpt":"","text":"DockerUbuntu安装docker安装系统工具12sudo apt-get updatesudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common 安装GPG证书1curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - 写入软件源信息1sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\" 更新软件源并安装docker12sudo apt-get -y updatesudo apt-get -y install docker-ce Centos安装docker安装依赖123$ sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 添加软件源123456789$ sudo yum-config-manager \\ --add-repo \\ https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo# 官方源# $ sudo yum-config-manager \\# --add-repo \\# https://download.docker.com/linux/centos/docker-ce.repo 配置安装最新docker 1sudo yum-config-manager --enable docker-ce-edge 安装12$ sudo yum makecache fast$ sudo yum install docker-ce 自动脚本安装12$ curl -fsSL get.docker.com -o get-docker.sh$ sudo sh get-docker.sh --mirror Aliyun 镜像加速配置文件 /etc/docker/daemon.json 123456789&#123; \"registry-mirrors\": [ \"https://registry.docker-cn.com\", \"https://3jc0zfhj.mirror.aliyuncs.com\" ], \"insecure-registries\": [ # 私有仓库地址 \"10.4.7.50\" ]&#125; 重启docker12sudo systemctl daemon-reloadsudo systemctl restart docker Docker-compose安装docker-compose12sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-compose docker-compose实战tomcat新建/usr/local/docker/tomcat目录 新建docker-compose.yml文件 123456789101112version: '3.1'services: tomcat: restart: always image: tomcat container_name: tomcat ports: - 8080:8080 volumes: - /usr/local/docker/tomcat/webapps/test:/usr/local/tomcat/webapps/test environment: TZ: Asia/Shanghai docker-compose实战mysql新建/usr/local/docker/mysql目录 新建docker-compose.yml文件 mysql5.7.221234567891011121314151617181920212223version: '3.1'services: mysql: restart: always image: mysql:5.7.22 container_name: mysql ports: - 3306:3306 environment: TZ: Asia/Shanghai MYSQL_ROOT_PASSWORD: 123456 command: --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1 --max_allowed_packet=128M --sql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\" volumes: - mysql-data:/var/lib/mysqlvolumes: mysql-data: mysql81234567891011121314151617181920212223version: '3.1'services: db: image: mysql restart: always environment: MYSQL_ROOT_PASSWORD: 123456 command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1 ports: - 3306:3306 volumes: - ./data:/var/lib/mysql adminer: image: adminer restart: always ports: - 8080:8080 GitLab安装gitlab docker-compose.yml ,如下: 123456789101112131415161718192021version: '3'services: gitlab: image: 'twang2218/gitlab-ce-zh' restart: always hostname: '10.4.7.50' environment: TZ: 'Asia/Shanghai' GITLAB_OMNIBUS_CONFIG: | external_url 'http://10.4.7.50' gitlab_rails['gitlab_shell_ssh_port'] = 2222 unicorn['port'] = 8888 nginx['listen_port'] = 80 ports: - '80:80' - '443:443' - '2222:22' volumes: - ./config:/etc/gitlab - ./data:/var/opt/gitlab - ./logs:/var/log/gitlab 访问地址：http://ip:80 GitLab基本配置账户与限制设置关闭 Gravatar头像 注册限制开启注册 免密登陆生成SSH KEY使用ssh-keygen工具生成，位置在git安装目录下，C:\\Program Files\\Git\\usr\\bin 输入命令 1ssh-keygen -t rsa -C \"your_email@example.com\" 添加ssh keygitlab-&gt;用户-&gt;设置-&gt;SSH密钥 标题：电脑标记 TortoiseGit修改ssh设置设置-&gt;网络-&gt;ssh客户端 修改为 git安装目录-&gt;usr-&gt;bin-&gt;ssh Nexus （依赖管理平台）安装nexus新建/usr/local/docker/nexus目录 新建docker-compose.yml文件 12345678910111213version: '3.1'services: nexus: restart: always image: sonatype/nexus3 container_name: nexus ports: - 8082:8081 volumes: - nexus-data:/nexus-data volumes: nexus-data: 登陆控制台地址: http://ip:port 用户名: admin 密码: admin123 修改maven仓库为私服在 Maven settings.xml 中添加 Nexus 认证信息(servers 节点下)： 1234567891011&lt;server&gt; &lt;id&gt;nexus-releases&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt;&lt;/server&gt;&lt;server&gt; &lt;id&gt;nexus-snapshots&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt;&lt;/server&gt; 配置自动化部署在 pom.xml 中添加如下代码： 123456789101112&lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;nexus-releases&lt;/id&gt; &lt;name&gt;Nexus Release Repository&lt;/name&gt; &lt;url&gt;http://127.0.0.1:8082/repository/maven-releases/&lt;/url&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;id&gt;nexus-snapshots&lt;/id&gt; &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt; &lt;url&gt;http://127.0.0.1:8082/repository/maven-snapshots/&lt;/url&gt; &lt;/snapshotRepository&gt; &lt;/distributionManagement&gt; 注意事项： ID 名称必须要与 settings.xml 中 Servers 配置的 ID 名称保持一致。 项目版本号中有 SNAPSHOT 标识的，会发布到 Nexus Snapshots Repository, 否则发布到 Nexus Release Repository，并根据 ID 去匹配授权账号。 部署到仓库1mvn deploy 上传第三方 JAR 包123456789# 如第三方JAR包：aliyun-sdk-oss-2.2.3.jarmvn deploy:deploy-file -DgroupId=com.aliyun.oss -DartifactId=aliyun-sdk-oss -Dversion=2.2.3 -Dpackaging=jar -Dfile=D:\\aliyun-sdk-oss-2.2.3.jar -Durl=http://127.0.0.1:8081/repository/maven-3rd/ -DrepositoryId=nexus-releases 注意事项： 建议在上传第三方 JAR 包时，创建单独的第三方 JAR 包管理仓库，便于管理有维护。（maven-3rd） -DrepositoryId=nexus-releases 对应的是 settings.xml 中 Servers 配置的 ID 名称。（授权） 配置代理仓库1234567891011121314151617181920212223242526&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;Nexus Repository&lt;/name&gt; &lt;url&gt;http://127.0.0.1:8081/repository/maven-public/&lt;/url&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;/repository&gt;&lt;/repositories&gt;&lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;Nexus Plugin Repository&lt;/name&gt; &lt;url&gt;http://127.0.0.1:8081/repository/maven-public/&lt;/url&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;/pluginRepository&gt;&lt;/pluginRepositories&gt; 安装Docker Registry私服安装新建/usr/local/docker/registry目录 新建docker-compose.yml文件 12345678910version: '3.1'services: registry: image: registry restart: always container_name: registry ports: - 5000:5000 volumes: - ./data:/var/lib/registry 地址 http://ip:5000/v2/ 配置私服客户端编辑/etc/docker/daemon.json文件 12345678&#123; \"registry-mirrors\": [ \"https://registry.docker-cn.com\" ], \"insecure-registries\": [ \"ip:5000\" ]&#125; 重启服务 12$ sudo systemctl daemon-reload$ sudo systemctl restart docker 检查客户端配置是否生效使用 docker info 命令手动检查，如果从配置中看到如下内容，说明配置成功（192.168.75.133 为教学案例 IP） 123Insecure Registries: 192.168.75.133:5000 127.0.0.0/8 测试镜像上传我们以 Nginx 为例测试镜像上传功能 1234567891011## 拉取一个镜像docker pull nginx## 查看全部镜像docker images## 标记本地镜像并指向目标仓库（ip:port/image_name:tag，该格式为标记版本号）docker tag nginx 192.168.75.133:5000/nginx## 提交镜像到仓库docker push 192.168.75.133:5000/nginx 查看全部镜像1curl -XGET http://192.168.75.133:5000/v2/_catalog 查看指定镜像以 Nginx 为例，查看已提交的列表 1curl -XGET http://192.168.75.133:5000/v2/nginx/tags/list 测试拉取镜像 先删除镜像 12docker rmi nginxdocker rmi 192.168.75.133:5000/nginx 再拉取镜像 1docker pull 192.168.75.133:5000/nginx 部署Docker Registry WebUI私服安装成功后就可以使用 docker 命令行工具对 registry 做各种操作了。然而不太方便的地方是不能直观的查看 registry 中的资源情况。如果可以使用 UI 工具管理镜像就更好了。这里介绍两个 Docker Registry WebUI 工具 docker-registry-frontend docker-registry-web 两个工具的功能和界面都差不多，我们以 docker-registry-fontend 为例讲解 docker-registry-frontend新建/usr/local/docker/webui目录 新建docker-compose.yml 123456789101112version: '3.1'services: frontend: image: konradkleine/docker-registry-frontend:v2 ports: - 8080:80 volumes: - ./certs/frontend.crt:/etc/apache2/server.crt:ro - ./certs/frontend.key:/etc/apache2/server.key:ro environment: - ENV_DOCKER_REGISTRY_HOST=192.168.75.133 - ENV_DOCKER_REGISTRY_PORT=5000 地址：http://ip:8080 安装Harbor私有仓库GitHub地址：https://github.com/goharbor/harbor/releases 配置证书12345678openssl genrsa -des3 -out server.key 2048openssl req -new -key server.key -out server.csrcp server.key server.key.orgopenssl rsa -in server.key.org -out server.keyopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crtmkdir /data/cert -pmv server.* /data/certchmod -R 777 /data/cert 修改harbor.cfg hostname=域名 ui_url_protocol = https db_password = 数据库密码 harbor_admin_password = 123456 访问 hostname:80 账号：admin 密码：123456 登录到私有仓库docker login hostname Docker 安装WordPress个人博客运行环境 PHP 5.6 或更新软件 MySQL 5.6或 更新版本 Apache 和 mod_rewrite 模块 安装教程直接安装12docker run --name db -e MYSQL_ROOT_PASSWORD=example -d mariadbdocker run --name MyWordPress --link db:mysql -p 8080:80 -d workpress 使用Docker-compose安装123456789101112131415161718192021version '3'service: db: image: mysql:5.7 restart: always environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: #依赖db - db image: wordpress restart: always ports: - 8080:80 environment: WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress Docker内存限制 –memory-swap –memory 功能 正数S 正数M 容器可用总空间为S，其中ram为M，swap为（S-M），若S=M，则无可用swap资源 0 正数M 相当于未设置swap（unset） unset 正数M 若主机（Docker Host）启用了swap，则容器的可用swap为2*M -1 正数M 若注意（Docker Host）启用了swap，则容器可使用最大至主机上的所有swap空间的swap资源 Docker 清除虚悬镜像123docker rmi $(docker images -f \"dangling=true\" -q)# 或者docker image prune -a -f Docker-Compose 网络设置12345# 创建网络docker create network my_network# 查看已存在的网络docke network list 添加配置12345# docker-compose.ymlnetwork: default: external: name: my_network","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://kason.top/tags/Docker/"}]}],"categories":[],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://kason.top/tags/Redis/"},{"name":"Docker-compose","slug":"Docker-compose","permalink":"https://kason.top/tags/Docker-compose/"},{"name":"WordPress","slug":"WordPress","permalink":"https://kason.top/tags/WordPress/"},{"name":"Tomcat","slug":"Tomcat","permalink":"https://kason.top/tags/Tomcat/"},{"name":"Docker","slug":"Docker","permalink":"https://kason.top/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"https://kason.top/tags/Linux/"}]}